precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Base.GMP.MPZ.set), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.deepcopy), Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#33#38")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#34#39")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#35#40")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#36#41")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Base.foreach), getfield(Parsers, Symbol("#37#42")), Array{Base.GMP.BigInt, 1}})
precompile(Tuple{typeof(Compat.Sys.__init__)})
precompile(Tuple{typeof(FilePathsBase.__init__)})
precompile(Tuple{typeof(CSV.__init__)})
precompile(Tuple{typeof(MbedTLS.f_send), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.f_recv), Ptr{Nothing}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(MbedTLS.__init__)})
precompile(Tuple{typeof(HTTP.URIs.__init__)})
precompile(Tuple{typeof(HTTP.Parsers.__init__)})
precompile(Tuple{typeof(Base.active_project), Bool})
precompile(Tuple{typeof(Base.load_path_expand), String})
precompile(Tuple{typeof(Base.load_path)})
precompile(Tuple{getfield(Base, Symbol("#681#682")){String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#681#682")){String}, String})
precompile(Tuple{typeof(Base.project_deps_get), String, String})
precompile(Tuple{typeof(Base.identify_package), String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Any, Int64}, Symbol})
precompile(Tuple{getfield(Base, Symbol("#689#690")){Base.UUID, String}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#689#690")){Base.UUID, String}, String})
precompile(Tuple{typeof(Base.manifest_deps_get), String, Base.PkgId, String})
precompile(Tuple{typeof(Base.identify_package), Base.PkgId, String})
precompile(Tuple{typeof(Base.manifest_uuid_path), String, Base.PkgId})
precompile(Tuple{typeof(Base.locate_package), Base.PkgId})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base.register_root_module), Module})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.compilecache_path), Base.PkgId})
precompile(Tuple{typeof(Base.load_path_setup_code), Bool})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._include_dependency), Module, String})
precompile(Tuple{typeof(Base.include_relative), Module, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{getfield(Dataiku, Symbol("#10#12")), Char})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Dataiku, Symbol("#10#12")), String}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Dataiku, Symbol("#10#12")), String}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Char, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#10#12")), String}, getfield(Dataiku, Symbol("#9#11"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Char, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#10#12")), String}, getfield(Dataiku, Symbol("#9#11"))}})
precompile(Tuple{typeof(Base.map), typeof(Base.Unicode.uppercase), String})
precompile(Tuple{typeof(Dataiku.create_projectKey), String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Array{Char, 1}})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Char, 1}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Char, 1}})
precompile(Tuple{Type{Dataiku.DSSProject}, String})
precompile(Tuple{getfield(Base, Symbol("##s66#142")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:intern_call,), Tuple{Bool}}}, Type{NamedTuple{(:params,), Tuple{Base.Dict{String, Bool}}}}})
precompile(Tuple{typeof(Core.Compiler.zero), Type{Int128}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.OneTo{Int64}, 1}}})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nloops")), LineNumberNode, Module, Any, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_arith), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve_conditional), Expr})
precompile(Tuple{typeof(Base.Cartesian.exprresolve), Expr})
precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String}})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{Type{Base.Val{x} where x}, Bool})
precompile(Tuple{Type{Base.Val{true}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:dims,), Tuple{Int64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{DataFrames.RowIndexMap, 1}}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.SubString{String}, 1}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.typeintersect), Any, Any})
precompile(Tuple{typeof(Mmap.grow!), Base.IOStream, Int64, Int64})
precompile(Tuple{getfield(Mmap, Symbol("##mmap#1")), Bool, Bool, typeof(Mmap.mmap), Base.IOStream, Type{Array{UInt8, 1}}, Tuple{Int64}, Int64})
precompile(Tuple{getfield(JSON.Parser, Symbol("#kw##parse")), NamedTuple{(:dicttype, :inttype, :allownan, :null), Tuple{DataType, DataType, Bool, Nothing}}, typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(Base.read), Base.IOStream})
precompile(Tuple{getfield(JSON.Parser, Symbol("#4#5")){DataType, DataType, Nothing, Bool, Bool, Int64}, Base.IOStream})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(JSON.Parser, Symbol("#4#5")){DataType, DataType, Nothing, Bool, Bool, Int64}, String})
precompile(Tuple{typeof(Dataiku.init_context)})
precompile(Tuple{typeof(Dataiku.get_context)})
precompile(Tuple{typeof(Dataiku.get_auth_header)})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, Bool}}, getfield(Dataiku, Symbol("#1#3"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, Bool}}, getfield(Dataiku, Symbol("#1#3"))}})
precompile(Tuple{getfield(Dataiku, Symbol("##get_url_and_header#5")), Bool, Base.Dict{String, Bool}, Bool, typeof(Dataiku.get_url_and_header), String})
precompile(Tuple{getfield(Dataiku, Symbol("##request#6")), Bool, Base.Iterators.Pairs{Symbol, Base.Dict{String, Bool}, Tuple{Symbol}, NamedTuple{(:params,), Tuple{Base.Dict{String, Bool}}}}, typeof(Dataiku.request), String, String, String})
precompile(Tuple{getfield(Dataiku, Symbol("##request_json#7")), Base.Iterators.Pairs{Symbol, Base.Dict{String, Bool}, Tuple{Symbol}, NamedTuple{(:params,), Tuple{Base.Dict{String, Bool}}}}, typeof(Dataiku.request_json), String, String, String})
precompile(Tuple{typeof(Dataiku.delete), Dataiku.DSSProject, Bool})
precompile(Tuple{typeof(Dataiku.delete), Dataiku.DSSProject})
precompile(Tuple{typeof(JSON.Parser._count_before), String, Char, Int64})
precompile(Tuple{typeof(JSON.Parser._error), String, JSON.Parser.MemoryParserState})
precompile(Tuple{getfield(JSON.Parser, Symbol("##parse#1")), Type{T} where T, Type{Int64}, Bool, Nothing, typeof(JSON.Parser.parse), String})
precompile(Tuple{typeof(JSON.Parser.read_four_hex_digits!), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser._error_expected_char), UInt8, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.read_unicode_escape!), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.predict_string), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{UInt8, UInt8}, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(JSON.Parser.parse_string), JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8})
precompile(Tuple{typeof(JSON.Parser.parse_jsconstant), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.hasleadingzero), JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.int_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState, JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Int64})
precompile(Tuple{Type{Float64}, Base.GMP.BigInt, Base.Rounding.RoundingMode{:Nearest}})
precompile(Tuple{typeof(Parsers.roundQuotient), Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Math.ldexp), Base.MPFR.BigFloat, Int64})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int64, Int64})
precompile(Tuple{typeof(Core.throw_inexacterror), Symbol, Type{Int32}, Int128})
precompile(Tuple{typeof(Parsers.BigInt!), Base.GMP.BigInt, Int128})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int128, Int64})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Int128})
precompile(Tuple{typeof(Base.Math.ldexp), Float64, Int128})
precompile(Tuple{typeof(Base.GMP.MPZ.realloc2), Int64})
precompile(Tuple{Type{Base.GMP.BigInt}, Int128})
precompile(Tuple{typeof(Base.exp2), Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.:(*)), Base.MPFR.BigFloat, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Int128, Int128})
precompile(Tuple{typeof(Base.GMP.MPZ.add_ui), Base.GMP.BigInt, UInt8})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Base.GMP.BigInt, Int64})
precompile(Tuple{typeof(Parsers.pow10), Type{Float64}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Math.ldexp), Float64, Base.GMP.BigInt})
precompile(Tuple{typeof(Parsers.scale), Type{Float64}, Base.GMP.BigInt, Base.GMP.BigInt})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Base.CodeUnits{UInt8, String}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, Nothing, Nothing, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Base.CodeUnits{UInt8, String}, Int64, Int64, UInt8, Int16, Parsers.Options{false, false, false, Nothing, Nothing, Nothing}, Type{Int128}})
precompile(Tuple{typeof(Parsers.xparse), Type{Float64}, String, Int64, Int64, Parsers.Options{false, false, false, Nothing, Nothing, Nothing}})
precompile(Tuple{typeof(JSON.Parser.number_from_bytes), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState, Bool, JSON.Parser.MemoryParserState, Int64, Int64})
precompile(Tuple{typeof(JSON.Parser.parse_number), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_object), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_array), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{typeof(JSON.Parser.parse_value), JSON.Parser.ParserContext{Base.Dict{String, Any}, Int64, true, nothing}, JSON.Parser.MemoryParserState})
precompile(Tuple{Type{Dataiku.DSSContext}, String, String})
precompile(Tuple{typeof(Base.getproperty), Dataiku.DSSContext, Symbol})
precompile(Tuple{typeof(Base64.base64encode), String})
precompile(Tuple{typeof(Base64.encode), UInt8})
precompile(Tuple{typeof(Base.close), Base64.Base64EncodePipe})
precompile(Tuple{getfield(Base64, Symbol("##base64encode#3")), Nothing, typeof(Base64.base64encode), Function, String})
precompile(Tuple{typeof(Base.unsafe_write), Base64.Base64EncodePipe, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.write), Base64.Base64EncodePipe, String})
precompile(Tuple{typeof(Base.unsafe_write), Base.GenericIOBuffer{Array{UInt8, 1}}, Ptr{UInt8}, Int64})
precompile(Tuple{typeof(Base.isnothing), Dataiku.DSSContext})
precompile(Tuple{typeof(Base.:(*)), String, String, String, String})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.stack)})
precompile(Tuple{typeof(HTTP.URIs.group), Int64, HTTP.URIs.RegexAndMatchData, String, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.URIs.ensurevalid), HTTP.URIs.URI})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Base.SubString{String}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}, String})
precompile(Tuple{typeof(HTTP.URIs.formaturi), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.backtrace)})
precompile(Tuple{typeof(Base.StackTraces.lookup), Base.InterpreterIP})
precompile(Tuple{typeof(Base.StackTraces.lookup), Ptr{Nothing}})
precompile(Tuple{typeof(HTTP.method_name), Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(HTTP.postcondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, String, String, String, String})
precompile(Tuple{getfield(HTTP.URIs, Symbol("##parse_uri_reference#6")), Bool, typeof(HTTP.URIs.parse_uri_reference), String})
precompile(Tuple{typeof(HTTP.Messages.mkheaders), Base.Dict{String, String}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, String, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Base.Dict{String, String}, String})
precompile(Tuple{typeof(HTTP.request), String, String, Base.Dict{String, String}, String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction,), Tuple{Nothing}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, Nothing}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(HTTP.URIs.resource), HTTP.URIs.URI})
precompile(Tuple{Type{Base.SubString{T} where T<:AbstractString}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Messages.ascii_lc_isequal), Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Pairs.setbyfirst), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{Base.SubString{String}, Base.SubString{String}}, typeof(HTTP.Messages.field_name_isequal)})
precompile(Tuple{typeof(HTTP.Messages.ascii_lc_isequal), Base.SubString{String}, String})
precompile(Tuple{typeof(HTTP.Messages.defaultheader!), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{String, Base.SubString{String}}})
precompile(Tuple{typeof(HTTP.Messages.defaultheader!), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Pair{String, String}})
precompile(Tuple{typeof(HTTP.Messages.hasheader), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{typeof(HTTP.Messages.mkheaders), Array{Any, 1}})
precompile(Tuple{getfield(HTTP.Messages, Symbol("##Request#3")), Base.VersionNumber, Nothing, Type{HTTP.Messages.Request}, String, String, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.CodeUnits{UInt8, String}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, String})
precompile(Tuple{getfield(Base64, Symbol("#1#2")){Base64.Base64EncodePipe}, Base64.Buffer})
precompile(Tuple{getfield(Mmap, Symbol("#3#5")){Int64, Ptr{Nothing}}, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.string), Base.SubString{String}, String, Base.SubString{String}, String, Vararg{Union{Char, Base.SubString{String}, String}, N} where N})
precompile(Tuple{getfield(Base, Symbol("#Timer#505#506")), Float64, Type{Base.Timer}, Float64})
precompile(Tuple{typeof(Random.make_seed)})
precompile(Tuple{Type{Random.MersenneTwister}, Nothing})
precompile(Tuple{typeof(Random.default_rng), Int64})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{typeof(HTTP.Messages.defaultheader!), HTTP.Messages.Request, Base.Pair{String, String}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, String})
precompile(Tuple{typeof(Base.filter), getfield(HTTP.ConnectionPool, Symbol("#6#7")){DataType, Base.SubString{String}, Base.SubString{String}, Int64}, Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Bool, 1}, Base.Generator{Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}, getfield(HTTP.ConnectionPool, Symbol("#isdeletable#10"))}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}, Base.Generator{Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}, getfield(HTTP.ConnectionPool, Symbol("#isdeletable#10"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.deleteat!), Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}, Array{Bool, 1}})
precompile(Tuple{typeof(HTTP.ConnectionPool.purge)})
precompile(Tuple{typeof(Base.filter), getfield(HTTP.ConnectionPool, Symbol("#4#5")){DataType, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Int64}, Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}})
precompile(Tuple{typeof(Base.filter), getfield(HTTP.ConnectionPool, Symbol("#12#13")), Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}})
precompile(Tuple{typeof(Base.filter), getfield(HTTP.ConnectionPool, Symbol("#8#9")){DataType, Base.SubString{String}, Base.SubString{String}, Int64, Bool}, Array{HTTP.ConnectionPool.Connection{T} where T<:IO, 1}})
precompile(Tuple{typeof(Sockets.connect!), Sockets.TCPSocket, Sockets.IPv4, UInt64})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#14")), Bool, Int64, Base.Iterators.Pairs{Symbol, Union{Nothing, Bool}, Tuple{Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction), Tuple{Bool, Nothing}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.IOExtras.peerport), Sockets.TCPSocket})
precompile(Tuple{typeof(HTTP.IOExtras.localport), Sockets.TCPSocket})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, Int64, Int64, Sockets.TCPSocket, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Int64, Bool, Base.GenericCondition{Base.AlwaysLockedST}, Int64, Bool, Base.GenericCondition{Base.AlwaysLockedST}, Float64})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, UInt16, Int64, Sockets.TCPSocket, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Int64, Bool, Base.GenericCondition{Base.AlwaysLockedST}, Int64, Bool, Base.GenericCondition{Base.AlwaysLockedST}, Float64})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, Int64, UInt16, Sockets.TCPSocket, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Int64, Bool, Base.GenericCondition{Base.AlwaysLockedST}, Int64, Bool, Base.GenericCondition{Base.AlwaysLockedST}, Float64})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, UInt16, UInt16, Sockets.TCPSocket, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64, Int64, Bool, Base.GenericCondition{Base.AlwaysLockedST}, Int64, Bool, Base.GenericCondition{Base.AlwaysLockedST}, Float64})
precompile(Tuple{Type{HTTP.ConnectionPool.Connection{T} where T<:IO}, Base.SubString{String}, Base.SubString{String}, Int64, Int64, Bool, Sockets.TCPSocket})
precompile(Tuple{typeof(HTTP.precondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(HTTP.postcondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}})
precompile(Tuple{typeof(HTTP.IOExtras.startwrite), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#11")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction), Tuple{Int64, Nothing}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.catch_backtrace)})
precompile(Tuple{typeof(Distributed.flush_gc_msgs)})
precompile(Tuple{getfield(Distributed, Symbol("#135#136"))})
precompile(Tuple{typeof(Base.notify), Base.GenericCondition{Base.Threads.SpinLock}})
precompile(Tuple{typeof(Base._any), getfield(HTTP.Messages, Symbol("#4#5")), Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Colon})
precompile(Tuple{typeof(HTTP.Messages.bodylength), HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.bodylength), HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.IOExtras.startwrite), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.println), HTTP.Messages.Request})
precompile(Tuple{typeof(HTTP.Messages.issafe), String})
precompile(Tuple{typeof(HTTP.Messages.isidempotent), String})
precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.unalias), Array{UInt8, 1}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.copyto!), Array{UInt8, 1}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(HTTP.Parsers.group), Int64, HTTP.Parsers.RegexAndMatchData, String})
precompile(Tuple{typeof(Base.ntuple), getfield(Base, Symbol("#457#458")){Array{Base.SubString{String}, 1}}, Int64})
precompile(Tuple{Type{Base.VersionNumber}, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Parsers.nextbytes), HTTP.Parsers.RegexAndMatchData, String})
precompile(Tuple{typeof(HTTP.Parsers.parse_status_line!), String, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Parsers.group), Int64, HTTP.Parsers.RegexAndMatchData, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Parsers.nextbytes), HTTP.Parsers.RegexAndMatchData, Base.SubString{String}})
precompile(Tuple{typeof(HTTP.Messages.appendheader), HTTP.Messages.Response, Base.Pair{Base.SubString{String}, Base.SubString{String}}})
precompile(Tuple{typeof(HTTP.Messages.parse_header_fields!), Base.SubString{String}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.Messages.readheaders), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Response})
precompile(Tuple{typeof(HTTP.IOExtras.startread), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{Type{HTTP.Parsers.ParseError}, Symbol, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(HTTP.Parsers.parse_chunk_size), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(HTTP.Messages.readchunksize), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Response})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(HTTP.postcondition_error), String, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}, String, Int64, String, Int64})
precompile(Tuple{typeof(HTTP.Streams.http_unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.eof), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.unsafe_read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.readbytes!), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.read), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(HTTP.Messages.ascii_lc_isequal), String, String})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Response, String, String})
precompile(Tuple{typeof(HTTP.ConnectionPool.purge), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{typeof(HTTP.IOExtras.closewrite), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(HTTP.IOExtras.closeread), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.close), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.readavailable), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Int64})
precompile(Tuple{typeof(HTTP.IOExtras.closeread), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{typeof(Base.println), HTTP.Messages.Response})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, String})
precompile(Tuple{typeof(HTTP.Messages.hasheader), HTTP.Messages.Request, String})
precompile(Tuple{typeof(HTTP.Messages.ischunked), HTTP.Messages.Request})
precompile(Tuple{typeof(Base.string), Base.SubString{String}, String, Base.SubString{String}, String})
precompile(Tuple{typeof(HTTP.Messages.writeheaders), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request})
precompile(Tuple{typeof(Base.string), String, String, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, UInt8})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Char})
precompile(Tuple{typeof(HTTP.StreamRequest.writechunk), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Request, Char})
precompile(Tuple{typeof(Base.write), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, String, String})
precompile(Tuple{typeof(Base.unsafe_write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Request, String})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, String, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(Base.task_done_hook), Task})
precompile(Tuple{typeof(HTTP.ConnectionPool.read_to_buffer), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Int64})
precompile(Tuple{typeof(Base.readuntil), HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, Function, Int64})
precompile(Tuple{typeof(Base.alloc_buf_hook), Sockets.TCPSocket, UInt64})
precompile(Tuple{getfield(Base, Symbol("#readcb_specialized#517")), Sockets.TCPSocket, Int64, UInt64})
precompile(Tuple{getfield(HTTP.Parsers, Symbol("##find_end_of_header#1")), Bool, typeof(HTTP.Parsers.find_end_of_header), Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_header)})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_chunk_size)})
precompile(Tuple{typeof(Base.readuntil), Base.GenericIOBuffer{Array{UInt8, 1}}, typeof(HTTP.Parsers.find_end_of_trailer)})
precompile(Tuple{getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, Tuple{Int64, Float64}, HTTP.ExceptionRequest.StatusError})
precompile(Tuple{typeof(HTTP.ConnectionPool.monitor_idle_connection), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#isdeletable#10")), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#4#5")){DataType, Base.SubString{String}, Base.SubString{String}, Int64, Bool, Int64}, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{typeof(HTTP.ConnectionPool.client_transaction), HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:intern_call,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(Dataiku, Symbol("##get_url_and_header#5")), Bool, Nothing, Bool, typeof(Dataiku.get_url_and_header), String})
precompile(Tuple{getfield(Dataiku, Symbol("##request#6")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request), String, String, Base.Dict{String, String}})
precompile(Tuple{getfield(Dataiku, Symbol("##request_json#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request_json), String, String, Base.Dict{String, String}})
precompile(Tuple{typeof(Dataiku.create_project), String, String, String})
precompile(Tuple{typeof(Dataiku.create_project), String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.unsafe_write), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, UInt8})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, String})
precompile(Tuple{typeof(JSON.Writer.show_string), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(JSON.Writer.show_key), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.pathof), Module})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@nexprs")), LineNumberNode, Module, Int64, Expr})
precompile(Tuple{getfield(Base.Cartesian, Symbol("#@ncall")), LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Core.Compiler.zero), Type{UInt8}})
precompile(Tuple{typeof(Mmap.mmap), String, Type{Array{UInt8, 1}}})
precompile(Tuple{getfield(Mmap, Symbol("##mmap#1")), Bool, Bool, typeof(Mmap.mmap), Mmap.Anonymous, Type{Array{UInt8, 1}}, Tuple{Int64}, Int64})
precompile(Tuple{typeof(CSV.getsource), String, Bool})
precompile(Tuple{typeof(CSV.skiptorow), CSV.ReversedBuf, Int64, Int64, UInt8, UInt8, UInt8, Int64, Int64})
precompile(Tuple{typeof(CSV.skiptorow), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Int64, Int64})
precompile(Tuple{typeof(CSV.checkcommentandemptyline), Array{UInt8, 1}, Int64, Int64, Nothing, Bool})
precompile(Tuple{typeof(CSV.detectheaderdatapos), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Nothing, Bool, Int64, Int64})
precompile(Tuple{typeof(CSV.detectdelimandguessrows), Array{UInt8, 1}, Int64, Int64, Int64, UInt8, UInt8, UInt8, UInt8, Nothing, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int8, Type}, Int8})
precompile(Tuple{typeof(Base.copyto!), Array{Base.Pair{String, UInt64}, 1}, Base.Dict{String, UInt64}})
precompile(Tuple{typeof(Base.sort!), Array{Base.Pair{String, UInt64}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(CSV, Symbol("#21#29"))}})
precompile(Tuple{typeof(Base.sort!), Array{Base.Pair{String, UInt64}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(CSV, Symbol("#21#29"))}, Array{Base.Pair{String, UInt64}, 1}})
precompile(Tuple{typeof(Base.rand), Type{Bool}})
precompile(Tuple{getfield(CSV, Symbol("#22#30")){Array{UInt8, 1}, UInt8, Array{Type, 1}, Array{Union{Nothing, Array{String, 1}}, 1}, Int64}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#22#30")){Array{UInt8, 1}, UInt8, Array{Type, 1}, Array{Union{Nothing, Array{String, 1}}, 1}, Int64}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Base.Pair{String, UInt64}, 1}, getfield(CSV, Symbol("#20#28"))}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{String, 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.fill!), Array{Union{Nothing, Array{String, 1}}, 1}, Nothing})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Ptr{UInt8}, Int64}, 1}, Base.Generator{Array{String, 1}, typeof(Parsers.ptrlen)}, Int64, Int64})
precompile(Tuple{typeof(Base._collect), Array{String, 1}, Base.Generator{Array{String, 1}, typeof(Parsers.ptrlen)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Ptr{UInt8}, Int64}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.By{getfield(Parsers, Symbol("#1#2"))}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Ptr{UInt8}, Int64}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.By{getfield(Parsers, Symbol("#1#2"))}, Array{Tuple{Ptr{UInt8}, Int64}, 1}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Ptr{UInt8}, Int64}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ReverseOrdering{Base.Order.By{getfield(Parsers, Symbol("#1#2"))}}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Ptr{UInt8}, Int64}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ReverseOrdering{Base.Order.By{getfield(Parsers, Symbol("#1#2"))}}, Array{Tuple{Ptr{UInt8}, Int64}, 1}})
precompile(Tuple{typeof(Parsers.prepare), Array{String, 1}})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Array{String, 1}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Nothing, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(CSV.file), String, Int64, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Nothing, Bool, Char, Nothing, Nothing, Char, Nothing, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}})
precompile(Tuple{typeof(Base.throw_checksize_error), Array{Symbol, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base._unsafe_getindex), Base.IndexLinear, Array{Symbol, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Char, 0}, Tuple{}, Tuple{}}, Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Array{Int64, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("##make_unique!#1")), Bool, typeof(DataFrames.make_unique!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Dict{Symbol, Int64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, Int64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Int64}, Int64, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, Int64}}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Base.UnitRange{Int64}}}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{AbstractArray{T, 1} where T, 1}, getfield(DataFrames, Symbol("#84#87"))}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.string), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{getfield(DataFrames, Symbol("#DataFrame#83#86")), Bool, Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}, DataFrames.Index})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#98")), Bool, Bool, Type{DataFrames.DataFrame}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(CSV.read), String})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Mmap, Symbol("#7#8")){Array{UInt8, 1}, Bool, Bool, Tuple{Int64}, Int64}, String, Vararg{String, N} where N})
precompile(Tuple{Type{Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}}, Array{String, 1}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Nothing, Bool, Bool})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#8#11"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#8#11"))}})
precompile(Tuple{typeof(CSV.unescape), CSV.PointerString, UInt8})
precompile(Tuple{typeof(CSV.columnname), Array{UInt8, 1}, Int64, Int64, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{String, Nothing}, Base.SubString{String}})
precompile(Tuple{typeof(Base.map), getfield(CSV, Symbol("#4#5")), Base.SubString{String}})
precompile(Tuple{typeof(CSV.normalizename), String})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Array{String, 1}, getfield(CSV, Symbol("#9#12")){Bool}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{String, 1}, getfield(CSV, Symbol("#9#12")){Bool}}})
precompile(Tuple{typeof(CSV.makeunique), Array{Symbol, 1}})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Bool})
precompile(Tuple{Type{Base.Val{false}}})
precompile(Tuple{typeof(Dates.character_codes), Core.SimpleVector})
precompile(Tuple{getfield(Parsers, Symbol("##s52#15")), Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base.first), Core.SimpleVector})
precompile(Tuple{typeof(Dates.genvar), DataType})
precompile(Tuple{Type{Base.IteratorSize}, Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Parsers, Symbol("#16#17")), Tuple{DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Symbol, 1}, Vararg{Any, N} where N})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}, Base.HasLength})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Expr, 1}})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Type, 1}, getfield(Parsers, Symbol("#19#20"))}})
precompile(Tuple{getfield(Parsers, Symbol("##s52#18")), Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}}}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{Type, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Type, 1}, getfield(Parsers, Symbol("#19#20"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type, 1}, getfield(Parsers, Symbol("#19#20"))}, Int64})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{Type{Base.IteratorSize}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Parsers, Symbol("#16#17")), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Int64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Dates.AMPM, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Dates.AMPM}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, Dates.AMPM}, Int64, Int64})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-dd\THH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{Type{Base.IteratorSize}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Parsers, Symbol("#16#17")), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Parsers, Symbol("#16#17"))}, Int64, Int64})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{Type{Base.IteratorSize}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}})
precompile(Tuple{typeof(Base._array_for), Type{Expr}, Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Base.HasLength})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("HH:MM:SS.s"), Tuple{Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}}}}})
precompile(Tuple{Type{Base.Iterators.Zip{Is} where Is<:Tuple}, Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.map), getfield(Base.Iterators, Symbol("#3#4")), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base.Iterators._zip_iterate_all), Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}, Tuple{Tuple{}, Tuple{}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64}}}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(Base, Symbol("##chop#326")), Int64, Int64, typeof(Base.chop), String})
precompile(Tuple{typeof(Base.nextind), Base.SubString{String}, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("##chop#326")), Int64, Int64, typeof(Base.chop), Base.SubString{String}})
precompile(Tuple{typeof(Parsers.codes), Int16})
precompile(Tuple{typeof(CSV.fatalerror), Array{UInt8, 1}, Int64, Int64, Int16, Int64, Int64})
precompile(Tuple{typeof(CSV.reallocatetape), Int64, Int64, Int64})
precompile(Tuple{getfield(Mmap, Symbol("##mmap#1")), Bool, Bool, typeof(Mmap.mmap), Mmap.Anonymous, Type{Array{UInt64, 1}}, Tuple{Int64}, Int64})
precompile(Tuple{typeof(CSV.notenoughcolumns), Int64, Int64, Int64})
precompile(Tuple{typeof(CSV.toomanycolumns), Int64, Int64})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Int8, Int8}, Int8})
precompile(Tuple{Type{Base.Dict{String, UInt64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, UInt64}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, UInt64}, String})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, UInt64}, CSV.PointerString})
precompile(Tuple{typeof(Dates.validargs), Type{Dates.Time}, Int64, Int64, Int64, Int64, Int64, Int64, Dates.AMPM})
precompile(Tuple{typeof(Base.power_by_squaring), Int64, Int64})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Type{Int128}})
precompile(Tuple{typeof(CSV.detect), Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Base.Dict{Int8, Int8}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Array{Int64, 1}, Bool, Array{Int8, 1}, Bool, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Float64}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.Date}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.DateTime}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.Time}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Bool}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsetape), Base.Val{false}, Bool, Int64, Base.Dict{Int8, Int8}, Array{Array{UInt64, 1}, 1}, Array{Array{UInt64, 1}, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Nothing, Array{Int64, 1}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Int64, Array{Int8, 1}, Array{Int64, 1}, Bool, Parsers.Options{false, true, false, Base.Missing, UInt8, Nothing}, Bool})
precompile(Tuple{typeof(CSV._eltype), Type{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Array{UInt64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(CSV.uint64), Int64})
precompile(Tuple{Type{CSV.Column{Int64, Int64}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{typeof(CSV._eltype), Type{Dates.Date}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Dates.Date}})
precompile(Tuple{Type{CSV.Column{Dates.Date, Dates.Date}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{typeof(CSV._eltype), Type{String}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{String}})
precompile(Tuple{typeof(CSV.sentinelvalue), Type{String}})
precompile(Tuple{Type{CSV.Column{String, String}}, Array{UInt64, 1}, Int64, UInt8, Bool, Array{String, 1}, Array{UInt8, 1}, UInt64})
precompile(Tuple{typeof(CSV._eltype), Type{Bool}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Bool}})
precompile(Tuple{Type{CSV.Column{Bool, Bool}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{typeof(Base.nonmissingtype), Type{CSV.PooledString}})
precompile(Tuple{typeof(CSV.sentinelvalue), Type{CSV.PooledString}})
precompile(Tuple{Type{CSV.Column{String, CSV.PooledString}}, Array{UInt64, 1}, Int64, UInt8, Bool, Array{String, 1}, Array{UInt8, 1}, UInt64})
precompile(Tuple{typeof(CSV._eltype), Type{Float64}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Float64}})
precompile(Tuple{Type{CSV.Column{Float64, Float64}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Int64, Int64}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{Int64, Int64}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{Symbol}, Type{CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{Int64, Int64}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{Int64, Int64}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{Int64, Int64}}, CSV.Column{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{Int64, Int64}}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Dates.Date, Dates.Date}}})
precompile(Tuple{Type{Base.Dict{Symbol, CSV.Column{T, P} where P where T}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Symbol, CSV.Column{Int64, Int64}}, Type{Symbol}, Type{CSV.Column{T, P} where P where T}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Base.Dict{Symbol, CSV.Column{Int64, Int64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Dates.Date, Dates.Date}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, Base.Generator{Base.Iterators.Zip{Tuple{Array{Symbol, 1}, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}}}, getfield(CSV, Symbol("#23#31"))}, Tuple{Int64, Int64}})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{String, String}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{String, String}, Symbol})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Bool, Bool}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Bool, Bool}, Symbol})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{String, CSV.PooledString}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{String, CSV.PooledString}, Symbol})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Float64, Float64}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Float64, Float64}, Symbol})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}})
precompile(Tuple{Type{Base.Dict{Symbol, AbstractArray{T, 1} where T}}, Base.Dict{Symbol, CSV.Column{T, P} where P where T}})
precompile(Tuple{Type{CSV.File{false}}, String, Array{Symbol, 1}, Array{Type, 1}, Int64, Int64, Array{Union{CSV.Column{T, P} where P where T, CSV.Column2{T, P} where P where T}, 1}, Base.Dict{Symbol, CSV.Column{T, P} where P where T}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Bool, Bool}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{String, CSV.PooledString}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Float64, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{String, String}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Dates.Date, Dates.Date}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Dates.Date, Dates.Date}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{String, String}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Bool, Bool}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{String, CSV.PooledString}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Float64, Float64}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), CSV.Column{Int64, Int64}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Array{AbstractArray{T, 1} where T, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{AbstractArray{T, 1} where T, 1}, getfield(DataFrames, Symbol("#84#87"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{AbstractArray{T, 1} where T, 1}, getfield(DataFrames, Symbol("#84#87"))}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), CSV.Column{Dates.Date, Dates.Date}})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), CSV.Column{String, String}})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), CSV.Column{Bool, Bool}})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), CSV.Column{String, CSV.PooledString}})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), CSV.Column{Float64, Float64}})
precompile(Tuple{typeof(Base.extrema), Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.:(|>)), DataFrames.DataFrame, Type{T} where T})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.Colon, Base.Colon})
precompile(Tuple{typeof(Base.copymutable), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.copy), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base._unaliascopy), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.unaliascopy), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.unalias), Array{AbstractArray{T, 1} where T, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.throw_boundserror), DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{AbstractArray{T, 1} where T, 1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{T, 1} where T, 1}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}})
precompile(Tuple{getfield(DataFrames, Symbol("##DataFrame#98")), Bool, Bool, Type{DataFrames.DataFrame}, DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Array{Symbol, 1}})
precompile(Tuple{Type{DataFrames.DataFrame}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copy), CSV.Column{Int64, Int64}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.copy), CSV.Column{Dates.Date, Dates.Date}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Dates.Date, 1}, Int64})
precompile(Tuple{typeof(Base.fill!), Array{UInt32, 1}, UInt32})
precompile(Tuple{typeof(WeakRefStrings._setindex!), WeakRefStrings.StringArray{String, 1}, String, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{String, String}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), CSV.Column{String, String}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, WeakRefStrings.StringArray{String, 1}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Bool, Bool}, Tuple{Int64}})
precompile(Tuple{typeof(Base.copy), CSV.Column{Bool, Bool}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Bool, 1}, Int64})
precompile(Tuple{Type{Base.Dict{String, UInt32}}})
precompile(Tuple{typeof(Base.foreach), getfield(CSV, Symbol("#41#44")), Base.Iterators.Enumerate{Nothing}})
precompile(Tuple{getfield(CSV, Symbol("#41#44")), Tuple{Int64, String}})
precompile(Tuple{typeof(Base.copy), CSV.Column{String, CSV.PooledString}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, UInt32}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, UInt32}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, UInt32}, UInt32, String})
precompile(Tuple{typeof(PooledArrays._invert), Base.Dict{String, UInt32}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{UInt32, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.identity), typeof(Base.max), Array{UInt32, 1}, Int64, Int64})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, PooledArrays.RefArray{Array{UInt32, 1}}, Base.Dict{String, UInt32}, Array{String, 1}})
precompile(Tuple{Type{PooledArrays.PooledArray{T, R, N, RA} where RA where N where R<:Integer where T}, PooledArrays.RefArray{Array{UInt32, 1}}, Base.Dict{String, UInt32}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Int64})
precompile(Tuple{typeof(Base.copy), CSV.Column{Float64, Float64}})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), Array{Int64, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), Array{Dates.Date, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), WeakRefStrings.StringArray{String, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), Array{Bool, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), Array{Float64, 1}})
precompile(Tuple{getfield(Dates, Symbol("#@dateformat_str")), LineNumberNode, Module, Any})
precompile(Tuple{Type{Dates.Delim{String, 14}}, String})
precompile(Tuple{Type{Dates.DateFormat{Symbol("yyyy-mm-ddT00:00:00.000Z"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{String, 14}}}}, Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{String, 14}}, Dates.DateLocale})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Int64, Symbol}, 1}, Base.Generator{Base.KeySet{Symbol, Base.Dict{Symbol, Int64}}, getfield(DataFrames, Symbol("#9#14")){String}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.KeySet{Symbol, Base.Dict{Symbol, Int64}}, getfield(DataFrames, Symbol("#9#14")){String}}})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Int64, Symbol}, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ForwardOrdering})
precompile(Tuple{typeof(Base.sort!), Array{Tuple{Int64, Symbol}, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ForwardOrdering, Array{Tuple{Int64, Symbol}, 1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#10#15")){Array{Tuple{Int64, Symbol}, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(DataFrames, Symbol("#10#15")){Array{Tuple{Int64, Symbol}, 1}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#13#18")){Int64}, Array{Tuple{Int64, Symbol}, 1}}, getfield(DataFrames, Symbol("#12#17"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Symbol, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#13#18")){Int64}, Array{Tuple{Int64, Symbol}, 1}}, getfield(DataFrames, Symbol("#12#17"))}})
precompile(Tuple{typeof(DataFrames.fuzzymatch), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.getproperty), DataFrames.DataFrame, Symbol})
precompile(Tuple{typeof(Base.map), Function, WeakRefStrings.StringArray{String, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#3#4")), WeakRefStrings.StringArray{String, 1}})
precompile(Tuple{getfield(Dates, Symbol("##s626#37")), Any, Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-ddT00:00:00.000Z"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{String, 14}}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Dates, Symbol("#38#39")), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#38#39"))}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#38#39"))}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#38#39"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#38#39"))}, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType, DataType}, getfield(Dates, Symbol("#38#39"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Type, 1}, getfield(Dates, Symbol("#35#36"))}})
precompile(Tuple{getfield(Dates, Symbol("##s627#34")), Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-ddT00:00:00.000Z"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{String, 14}}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{Type, 1}, getfield(Dates, Symbol("#35#36"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{Type, 1}, getfield(Dates, Symbol("#35#36"))}, Int64})
precompile(Tuple{typeof(Dates.tryparsenext_core), String, Int64, Int64, Dates.DateFormat{Symbol("yyyy-mm-ddT00:00:00.000Z"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{String, 14}}}, Bool})
precompile(Tuple{typeof(Base.parse), Type{Dates.DateTime}, String, Dates.DateFormat{Symbol("yyyy-mm-ddT00:00:00.000Z"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{String, 14}}}})
precompile(Tuple{typeof(Base.collect_to!), Array{Dates.DateTime, 1}, Base.Generator{WeakRefStrings.StringArray{String, 1}, getfield(Main, Symbol("#3#4"))}, Int64, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base._collect), WeakRefStrings.StringArray{String, 1}, Base.Generator{WeakRefStrings.StringArray{String, 1}, getfield(Main, Symbol("#3#4"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), WeakRefStrings.StringArray{String, 1}, Base.Generator{WeakRefStrings.StringArray{String, 1}, getfield(Main, Symbol("#3#4"))}})
precompile(Tuple{typeof(DataFrames.nrow), DataFrames.DataFrame})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{Dates.DateTime, 1}, Symbol})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{Dates.DateTime, 1}})
precompile(Tuple{typeof(Base.map), Function, Array{Dates.Date, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Main, Symbol("#5#6")), Array{Dates.Date, 1}})
precompile(Tuple{typeof(Dates.yearmonthday), Int64})
precompile(Tuple{typeof(Base.lpad), String, Int64, String})
precompile(Tuple{typeof(Base.string), Dates.Date})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Dates.Date, 1}, getfield(Main, Symbol("#5#6"))}, Int64})
precompile(Tuple{typeof(Base._collect), Array{Dates.Date, 1}, Base.Generator{Array{Dates.Date, 1}, getfield(Main, Symbol("#5#6"))}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Dates.Date, 1}, Base.Generator{Array{Dates.Date, 1}, getfield(Main, Symbol("#5#6"))}})
precompile(Tuple{typeof(DataFrames.insert_single_column!), DataFrames.DataFrame, Array{String, 1}, Symbol})
precompile(Tuple{typeof(Base.setproperty!), DataFrames.DataFrame, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Dataiku.set_current_project), Dataiku.DSSProject})
precompile(Tuple{getfield(Dataiku, Symbol("##create_dataset#62")), String, String, String, String, typeof(Dataiku.create_dataset), String, Dataiku.DSSProject})
precompile(Tuple{typeof(Dataiku.create_dataset), String, Dataiku.DSSProject})
precompile(Tuple{typeof(Base.:(*)), String, String, String})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, String}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Bool}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Bool}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, Base.Dict{String, String}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Bool}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, Base.Dict{String, String}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Bool}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, Base.Dict{String, String}}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, String}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Bool}, Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, Base.Dict{String, String}}}, Int64})
precompile(Tuple{getfield(Dataiku, Symbol("##request#6")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request), String, String, Base.Dict{String, Any}})
precompile(Tuple{getfield(Dataiku, Symbol("##request_json#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request_json), String, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.create_dataset), Base.Dict{String, Any}, Dataiku.DSSProject})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, String})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Bool})
precompile(Tuple{typeof(Base.print), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Bool})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Bool})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{String, String}})
precompile(Tuple{Type{Dataiku.DSSDataset}, String, Dataiku.DSSProject})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:infer_schema,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Array{Any, 1}}, Base.Pair{String, Bool}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Array{Any, 1}}, Base.Pair{String, Bool}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Array{Any, 1}}, Base.Pair{String, Bool}}})
precompile(Tuple{typeof(Dataiku.get_schema_from_df), DataFrames.DataFrame})
precompile(Tuple{typeof(CSV.isvaliddelim), Char})
precompile(Tuple{typeof(CSV.checkvaliddelim), Char})
precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
precompile(Tuple{typeof(DataFrames.eltypes), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Int64, Array{Symbol, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Symbol, 1}, typeof(Tables.sym)}, Int64})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Array{Symbol, 1}, Nothing})
precompile(Tuple{typeof(Tables.schema), DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.columntable), DataFrames.DataFrame})
precompile(Tuple{typeof(Tables.rows), DataFrames.DataFrame})
precompile(Tuple{getfield(CSV, Symbol("##write#53")), Char, Char, Nothing, Nothing, Char, Char, Char, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Bool, String, Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:writeheader,), Tuple{Bool}}}, typeof(CSV.write), Base.BufferStream, DataFrames.DataFrame})
precompile(Tuple{getfield(Dataiku, Symbol("##write_dataframe#42")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:infer_schema,), Tuple{Bool}}}, typeof(Dataiku.write_dataframe), Dataiku.DSSDataset, DataFrames.DataFrame})
precompile(Tuple{typeof(Dataiku.write_with_schema), Dataiku.DSSDataset, DataFrames.DataFrame})
precompile(Tuple{typeof(Dataiku._type_to_string), Type{T} where T})
precompile(Tuple{typeof(Base.eltype), Array{Dates.DateTime, 1}})
precompile(Tuple{typeof(Base.eltype), Array{Bool, 1}})
precompile(Tuple{typeof(Base.eltype), PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}})
precompile(Tuple{typeof(Base.eltype), Array{Float64, 1}})
precompile(Tuple{Type{Base.Dict{String, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Array{Any, 1}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Array{Any, 1}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Array{Any, 1}}, Array{Any, 1}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Array{Any, 1}}, Array{Any, 1}, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Array{Any, 1}}, Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Array{Any, 1}}, Tuple{Base.Pair{String, Array{Any, 1}}, Base.Pair{String, Bool}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Array{Any, 1}}, Type{String}, Type{Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Array{Any, 1}}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{Any, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, Array{Any, 1}}, Base.Pair{String, Bool}}, Int64})
precompile(Tuple{Type{CSV.Options{D, N, DF, M} where M where DF where N where D}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Bool, Tuple{}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Type{DataType}})
precompile(Tuple{typeof(Base.setindex!), Array{DataType, 1}, Type{T} where T, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{DataType, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.eltype), Tuple{Base.Broadcast.Extruded{DataFrames.DataFrameColumns{DataFrames.DataFrame, AbstractArray{T, 1} where T}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{DataType, 1}}})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Array{Symbol, 1}, Array{DataType, 1}})
precompile(Tuple{Type{Tables.Schema{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Int64, String, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}}}})
precompile(Tuple{getfield(Tables, Symbol("##s19#16")), Any, Any, Any, Any, Any})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Tables, Symbol("#17#19")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Tables, Symbol("#17#19")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#17#19")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#17#19")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Tables, Symbol("#17#19")){Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Int64, String, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}}, DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{String, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Tables.rows), NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Tables._types), Type{NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Tables._eltype), Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Tables._eltype), Type{Array{String, 1}}})
precompile(Tuple{typeof(Tables._eltype), Type{Array{Dates.DateTime, 1}}})
precompile(Tuple{typeof(Tables._eltype), Type{Array{Bool, 1}}})
precompile(Tuple{typeof(Tables._eltype), Type{PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}}})
precompile(Tuple{typeof(Tables._eltype), Type{Array{Float64, 1}}})
precompile(Tuple{typeof(Tables.schema), Tables.RowIterator{NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{getfield(Tables, Symbol("##s12#5")), Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{typeof(Base.seekstart), Base.BufferStream})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Int64, String, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}}, Tables.RowIterator{NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Float64, 1}}}}, Base.BufferStream, CSV.Options{UInt8, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:writeheader,), Tuple{Bool}}, typeof(CSV.write), Tables.Schema{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Int64, String, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}}, Tables.RowIterator{NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Float64, 1}}}}, Base.BufferStream, CSV.Options{UInt8, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.BufferStream, Int64, CSV.Options{UInt8, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Tuple{}}})
precompile(Tuple{typeof(CSV.writedelimnewline), Array{UInt8, 1}, Int64, Int64, Base.BufferStream, UInt8})
precompile(Tuple{typeof(CSV.check), Base.CodeUnits{UInt8, String}, Int64, UInt8, UInt8, UInt8, UInt8})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.BufferStream, String, CSV.Options{UInt8, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Tuple{}}})
precompile(Tuple{typeof(Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DateTime, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}})
precompile(Tuple{typeof(Dates.format), Dates.DateTime, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Int64})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.BufferStream, Dates.DateTime, CSV.Options{UInt8, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.BufferStream, Bool, CSV.Options{UInt8, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Tuple{}}})
precompile(Tuple{typeof(CSV.writecell), Array{UInt8, 1}, Int64, Int64, Base.BufferStream, Float64, CSV.Options{UInt8, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Tuple{}}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.BufferStream, Tables.Schema{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Int64, String, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}}, Tables.ColumnsRow{NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Float64, 1}}}}, Int64, CSV.Options{UInt8, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Tables.Schema{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Int64, String, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}}, Tables.RowIterator{NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Array{Int64, 1}, Array{String, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Bool, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, PooledArrays.PooledArray{String, UInt32, 1, Array{UInt32, 1}}, Array{Int64, 1}, Array{Float64, 1}}}}, CSV.Options{UInt8, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Tuple{}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.BufferStream})
precompile(Tuple{typeof(Dataiku.set_schema), Dataiku.DSSDataset, Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.runs_remotely)})
precompile(Tuple{typeof(Dataiku.get_flow)})
precompile(Tuple{typeof(Base.getproperty), Dataiku.DSSDataset, Symbol})
precompile(Tuple{typeof(Dataiku.get_name_or_id), Dataiku.DSSDataset})
precompile(Tuple{typeof(Dataiku.full_name), Dataiku.DSSDataset})
precompile(Tuple{typeof(Dataiku._get_flow_inputs_or_outputs), Dataiku.DSSDataset, String})
precompile(Tuple{getfield(Dataiku, Symbol("##request_json#7")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:intern_call,), Tuple{Bool}}}, typeof(Dataiku.request_json), String, String, Base.Dict{String, String}})
precompile(Tuple{getfield(Dataiku, Symbol("##_init_write_session#54")), String, String, Bool, typeof(Dataiku._init_write_session), Dataiku.DSSDataset, Base.Dict{String, Any}})
precompile(Tuple{getfield(Dataiku, Symbol("##write_data#51")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.write_data), Dataiku.DSSDataset, Base.BufferStream, Base.Dict{String, Any}})
precompile(Tuple{getfield(Dataiku, Symbol("#kw##write_data")), NamedTuple{(:infer_schema,), Tuple{Bool}}, typeof(Dataiku.write_data), Dataiku.DSSDataset, Base.BufferStream, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{Any, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, String}})
precompile(Tuple{typeof(JSON.Parser.skip!), JSON.Parser.MemoryParserState, UInt8, UInt8, Vararg{UInt8, N} where N})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Any}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Any}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Any}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{String, Any}}}, Int64})
precompile(Tuple{typeof(JSON.Writer.json), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{String, Any}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Generator{Base.Dict{String, String}, getfield(HTTP.URIs, Symbol("#16#17"))}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Base.Dict{String, String}, getfield(HTTP.URIs, Symbol("#16#17"))}, String})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Generator{Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}, getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.issafe)}}})
precompile(Tuple{getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.issafe)}, Char})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}, getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.issafe)}}, String})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Generator{Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}, getfield(HTTP.URIs, Symbol("#12#13")){typeof(HTTP.URIs.issafe)}}})
precompile(Tuple{getfield(Dataiku, Symbol("##request#6")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request), String, String, Base.BufferStream})
precompile(Tuple{typeof(Dataiku._push_data), String, Base.BufferStream})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, Base.BufferStream, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Base.Dict{String, String}, Base.BufferStream})
precompile(Tuple{typeof(HTTP.request), String, String, Base.Dict{String, String}, Base.BufferStream})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.BufferStream})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.BufferStream})
precompile(Tuple{typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.BufferStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{typeof(HTTP.Messages.setheader), HTTP.Messages.Request, Base.Pair{String, String}})
precompile(Tuple{getfield(Dataiku, Symbol("##request#6")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request), String, String, String})
precompile(Tuple{getfield(Dataiku, Symbol("##request_json#7")), Base.Iterators.Pairs{Symbol, Bool, Tuple{Symbol}, NamedTuple{(:intern_call,), Tuple{Bool}}}, typeof(Dataiku.request_json), String, String, String})
precompile(Tuple{typeof(Dataiku._wait_write_session), String})
precompile(Tuple{getfield(Dataiku, Symbol("#52#53")){String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#8#9")){DataType, Base.SubString{String}, Base.SubString{String}, Int64, Bool}, HTTP.ConnectionPool.Connection{Sockets.TCPSocket}})
precompile(Tuple{typeof(Base.write), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.BufferStream})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.BufferStream, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Int64, String})
precompile(Tuple{typeof(Base.string), Int64, String, String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{typeof(Base.include), Module, String})
precompile(Tuple{getfield(Test, Symbol("#@testset")), LineNumberNode, Module, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.testset_beginend), Tuple{String, Expr}, Expr, LineNumberNode})
precompile(Tuple{typeof(Test.parse_testset_args), Tuple{String}})
precompile(Tuple{getfield(Test, Symbol("#@test")), LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(Test.test_expr!), String, Expr})
precompile(Tuple{typeof(Test.get_test_result), Expr, LineNumberNode})
precompile(Tuple{typeof(Base.first), String})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Type{QuoteNode}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{QuoteNode, 1}, QuoteNode, Base.Generator{Array{Any, 1}, Type{QuoteNode}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, Type{QuoteNode}}})
precompile(Tuple{typeof(Test.get_testset_depth)})
precompile(Tuple{typeof(Base.length), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test._check_testset), Type{T} where T, Expr})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Dict{Symbol, Any}})
precompile(Tuple{Type{Test.DefaultTestSet}, String})
precompile(Tuple{typeof(Test.push_testset), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.push!), Array{Test.AbstractTestSet, 1}, Test.DefaultTestSet})
precompile(Tuple{typeof(Random.default_rng)})
precompile(Tuple{typeof(Base.copy), Random.MersenneTwister})
precompile(Tuple{typeof(Base.getproperty), Random.MersenneTwister, Symbol})
precompile(Tuple{typeof(Random.seed!), Array{UInt32, 1}})
precompile(Tuple{typeof(Test.get_testset)})
precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.lastindex), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Test.AbstractTestSet, 1}, Int64})
precompile(Tuple{getfield(Dataiku, Symbol("##request_json#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request_json), String, String, String})
precompile(Tuple{typeof(Dataiku.get_settings), Dataiku.DSSProject})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Float64, String})
precompile(Tuple{typeof(Base.haskey), Base.Dict{String, Any}, String})
precompile(Tuple{Type{Test.Returned}, Bool, Nothing, LineNumberNode})
precompile(Tuple{typeof(Test.do_test), Test.Returned, Expr})
precompile(Tuple{typeof(Dataiku.set_settings), Base.Dict{String, Any}, Dataiku.DSSProject})
precompile(Tuple{typeof(Dataiku.set_settings), Dataiku.DSSProject, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Int64})
precompile(Tuple{typeof(Base.print), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Int64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Float64})
precompile(Tuple{typeof(Base.write), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char})
precompile(Tuple{typeof(Base.Grisu.fastfixedtoa), Float64, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64, Array{UInt8, 1}, Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.Grisu.grisu), Float64, Int64, Int64, Array{UInt8, 1}})
precompile(Tuple{typeof(Base.Grisu._show), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64, Int64, Int64, Bool, Bool})
precompile(Tuple{typeof(Base.print), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Float64})
precompile(Tuple{typeof(Test.eval_test), Expr, Expr, LineNumberNode, Bool})
precompile(Tuple{typeof(Base.allocatedinline), Type{UInt128}})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{UInt128, 1}, Int64, Array{UInt128, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copy!), Random.MersenneTwister, Random.MersenneTwister})
precompile(Tuple{typeof(Test.pop_testset)})
precompile(Tuple{typeof(Base.pop!), Array{Test.AbstractTestSet, 1}})
precompile(Tuple{typeof(Test.record), Test.DefaultTestSet, Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_test_counts), Test.DefaultTestSet})
precompile(Tuple{typeof(Test.get_alignment), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Test.print_test_results), Test.DefaultTestSet, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Error, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Test.Fail, 1}, Int64, Int64})
precompile(Tuple{typeof(Test.filter_errors), Test.DefaultTestSet})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Union{Test.Error, Test.Fail}, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Test.finish), Test.DefaultTestSet})
precompile(Tuple{typeof(Dataiku.get_metadata), Dataiku.DSSProject})
precompile(Tuple{typeof(Base.length), Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.set_metadata), Base.Dict{String, Any}, Dataiku.DSSProject})
precompile(Tuple{typeof(Dataiku.set_metadata), Dataiku.DSSProject, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{String, 1}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Array{String, 1}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Array{String, 1}})
precompile(Tuple{typeof(Dataiku.get_tags), Dataiku.DSSProject})
precompile(Tuple{typeof(Dataiku.set_tags), Base.Dict{String, Any}, Dataiku.DSSProject})
precompile(Tuple{typeof(Dataiku.set_tags), Dataiku.DSSProject, Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.get_variables), Dataiku.DSSProject})
precompile(Tuple{typeof(Dataiku.set_variables), Base.Dict{String, Any}, Dataiku.DSSProject})
precompile(Tuple{typeof(Dataiku.set_variables), Dataiku.DSSProject, Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.duplicate), Dataiku.DSSProject, String, String, String})
precompile(Tuple{typeof(Dataiku.duplicate), Dataiku.DSSProject, String, String})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:intern_call,), Tuple{Bool}}}, Type{NamedTuple{(:params,), Tuple{Base.Dict{String, Array{Any, 1}}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, Array{Any, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, Array{Any, 1}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, Array{Any, 1}}}, getfield(Dataiku, Symbol("#1#3"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, Array{Any, 1}}}, getfield(Dataiku, Symbol("#1#3"))}})
precompile(Tuple{getfield(Dataiku, Symbol("##get_url_and_header#5")), Bool, Base.Dict{String, Array{Any, 1}}, Bool, typeof(Dataiku.get_url_and_header), String})
precompile(Tuple{getfield(Dataiku, Symbol("##request#6")), Bool, Base.Iterators.Pairs{Symbol, Base.Dict{String, Array{Any, 1}}, Tuple{Symbol}, NamedTuple{(:params,), Tuple{Base.Dict{String, Array{Any, 1}}}}}, typeof(Dataiku.request), String, String, String})
precompile(Tuple{getfield(Dataiku, Symbol("##request_json#7")), Base.Iterators.Pairs{Symbol, Base.Dict{String, Array{Any, 1}}, Tuple{Symbol}, NamedTuple{(:params,), Tuple{Base.Dict{String, Array{Any, 1}}}}}, typeof(Dataiku.request_json), String, String, String})
precompile(Tuple{getfield(Dataiku, Symbol("##list_projects#17")), Array{Any, 1}, typeof(Dataiku.list_projects)})
precompile(Tuple{typeof(Dataiku.list_projects)})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.TTY, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.TTY, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), Function, Symbol, Base.TTY, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String, Vararg{String, N} where N})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{getfield(Base, Symbol("##printstyled#709")), Bool, Symbol, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Base.print), String, String})
precompile(Tuple{typeof(Test.print_counts), Test.DefaultTestSet, Int64, Int64, Int64, Int64, Int64, Int64, Int64})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String, String})
precompile(Tuple{Type{NamedTuple{(:color,), T} where T<:Tuple}, Tuple{Symbol}})
precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), String})
precompile(Tuple{typeof(Dataiku.get_schema), Dataiku.DSSDataset})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(Dataiku, Symbol("#59#60"))}})
precompile(Tuple{typeof(Dataiku.get_column_names), Array{Any, 1}})
precompile(Tuple{getfield(Dataiku, Symbol("#59#60")), Base.Dict{String, Any}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Array{Any, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Array{Any, 1}, getfield(Dataiku, Symbol("#59#60"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Any, 1}, getfield(Dataiku, Symbol("#59#60"))}, Int64})
precompile(Tuple{typeof(Base.in), Base.Pair{String, Any}, Base.Dict{String, String}, typeof(Base.:(==))})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Any}, Base.Dict{String, String}})
precompile(Tuple{typeof(Dataiku.get_settings), Dataiku.DSSDataset})
precompile(Tuple{typeof(Base.getproperty), Dataiku.DSSProject, Symbol})
precompile(Tuple{typeof(Base.in), Base.Pair{String, Any}, Base.Dict{String, Any}, typeof(Base.:(==))})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Dataiku.set_settings), Dataiku.DSSDataset, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.get_metadata), Dataiku.DSSDataset})
precompile(Tuple{typeof(Dataiku.set_metadata), Dataiku.DSSDataset, Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.list_partitions), Dataiku.DSSDataset})
precompile(Tuple{typeof(Dataiku.get_column_names), Dataiku.DSSDataset, Array{Any, 1}})
precompile(Tuple{typeof(Dataiku.get_column_types), Dataiku.DSSDataset, Array{Any, 1}})
precompile(Tuple{getfield(Dataiku, Symbol("##_get_reading_schema#21")), Bool, typeof(Dataiku._get_reading_schema), Dataiku.DSSDataset, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, getfield(DataFrames, Symbol("#84#87"))}})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{AbstractArray{T, 1} where T, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#DataFrame#83#86")), Bool, Type{DataFrames.DataFrame}, Array{Any, 1}, DataFrames.Index})
precompile(Tuple{getfield(Dataiku, Symbol("##_create_sampling_argument#61")), String, Nothing, Nothing, Nothing, typeof(Dataiku._create_sampling_argument)})
precompile(Tuple{getfield(Dataiku, Symbol("##_get_reading_params#22")), Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku._get_reading_params), Dataiku.DSSDataset})
precompile(Tuple{getfield(Dataiku, Symbol("##get_dataframe#18")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.get_dataframe), Dataiku.DSSDataset, Array{Any, 1}})
precompile(Tuple{typeof(Dataiku.get_dataframe), Dataiku.DSSDataset})
precompile(Tuple{typeof(Dataiku.get_column_names), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, Nothing})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}, Int64})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, String}, Type{String}, Type{Union{Nothing, String}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Union{Nothing, String}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Union{Nothing, String}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Nothing, String}}, String, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Union{Nothing, String}}, Base.Dict{String, String}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Nothing, String}}, Nothing, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Nothing, String}}, Nothing, Nothing})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Union{Nothing, String}}, String, Nothing})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Union{Nothing, String}}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}, Int64})
precompile(Tuple{Type{NamedTuple{(:params,), T} where T<:Tuple}, Tuple{Base.Dict{String, Union{Nothing, String}}}})
precompile(Tuple{getfield(Dataiku, Symbol("#2#4")), Base.Pair{String, Union{Nothing, String}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, Union{Nothing, String}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, Union{Nothing, String}}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, Union{Nothing, String}}}, getfield(Dataiku, Symbol("#1#3"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, Union{Nothing, String}}}, getfield(Dataiku, Symbol("#1#3"))}})
precompile(Tuple{getfield(Dataiku, Symbol("##get_url_and_header#5")), Bool, Base.Dict{String, Union{Nothing, String}}, Bool, typeof(Dataiku.get_url_and_header), String})
precompile(Tuple{getfield(Dataiku, Symbol("##get_stream#8")), Base.Iterators.Pairs{Symbol, Base.Dict{String, Union{Nothing, String}}, Tuple{Symbol}, NamedTuple{(:params,), Tuple{Base.Dict{String, Union{Nothing, String}}}}}, typeof(Dataiku.get_stream), Function, String})
precompile(Tuple{getfield(Dataiku, Symbol("#kw##get_stream")), NamedTuple{(:params,), Tuple{Base.Dict{String, Union{Nothing, String}}}}, typeof(Dataiku.get_stream), Function, String})
precompile(Tuple{getfield(HTTP, Symbol("##open#6")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.open), Function, String, String, Base.Dict{String, String}})
precompile(Tuple{typeof(HTTP.open), Function, String, String, Base.Dict{String, String}})
precompile(Tuple{Type{NamedTuple{(:iofunction,), T} where T<:Tuple}, Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, Nothing, Nothing, Base.Iterators.Pairs{Symbol, getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}}, typeof(HTTP.request), String, String, Base.Dict{String, String}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}, typeof(HTTP.request), String, String, Base.Dict{String, String}, Nothing})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Char, Nothing, Array{Symbol, 1}, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}}})
precompile(Tuple{typeof(Base._promote_typejoin), Type{Char}, Type{Nothing}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction, :parent), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Function, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}, typeof(HTTP.request), Type{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#14")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction), Tuple{Bool, getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#11")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction), Tuple{Int64, getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.readbytes!), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64})
precompile(Tuple{typeof(BufferedStreams.fillbuffer!), BufferedStreams.BufferedInputStream{HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(Base.readbytes!), BufferedStreams.BufferedInputStream{HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}, Array{UInt8, 1}, Int64})
precompile(Tuple{typeof(CSV.slurp), BufferedStreams.BufferedInputStream{HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(CSV.detectheaderdatapos), Array{UInt8, 1}, Int64, Int64, UInt8, UInt8, UInt8, Nothing, Bool, Array{Symbol, 1}, Int64})
precompile(Tuple{typeof(CSV.detectdelimandguessrows), Array{UInt8, 1}, Int64, Int64, Int64, UInt8, UInt8, UInt8, Char, Nothing, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, Char, UInt8, Nothing, Nothing, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Array{String, 1}, UInt8, UInt8, UInt8, UInt8, UInt8, Char, UInt8, Nothing, Nothing, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{Type{Parsers.Options{ignorerepeated, Q, debug, S, D, DF} where DF where D where S where debug where Q where ignorerepeated}, Array{String, 1}, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Bool, Bool, Bool, Bool, Bool})
precompile(Tuple{typeof(CSV.file), BufferedStreams.BufferedInputStream{HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}, Array{Symbol, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:delim, :types, :header, :dateformat), Tuple{Char, Nothing, Array{Symbol, 1}, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}}, Type{CSV.File{threaded} where threaded}, BufferedStreams.BufferedInputStream{HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#19#20")){Array{Symbol, 1}, Nothing}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{Type{Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}}, Array{String, 1}, Base.Missing, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8, Nothing, Nothing, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Bool, Bool})
precompile(Tuple{typeof(Base.collect_to!), Array{Symbol, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#7#10"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(CSV, Symbol("#7#10"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Symbol, 1}, Symbol, Base.Generator{Array{Symbol, 1}, getfield(CSV, Symbol("#9#12")){Bool}}, Int64})
precompile(Tuple{typeof(CSV.columnname), Array{UInt8, 1}, Int64, Int64, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}, Int64})
precompile(Tuple{typeof(CSV.detectcolumnnames), Array{UInt8, 1}, Int64, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}, Array{Symbol, 1}, Bool})
precompile(Tuple{typeof(Dates.character_codes), Type{Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}})
precompile(Tuple{typeof(Dates._directives), Type{Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}})
precompile(Tuple{typeof(CSV.parsetape), Base.Val{false}, Bool, Int64, Base.Dict{Int8, Int8}, Array{Array{UInt64, 1}, 1}, Array{Array{UInt64, 1}, 1}, Array{UInt8, 1}, Int64, Int64, Int64, Nothing, Array{Int64, 1}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Int64, Array{Int8, 1}, Array{Int64, 1}, Bool, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}, Bool})
precompile(Tuple{typeof(CSV.timetype), Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}, Type{Base.GMP.BigInt}})
precompile(Tuple{typeof(Parsers._typeparser), Type{Float64}, Array{UInt8, 1}, Int64, Int64, UInt8, Int16, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}, Type{Int128}})
precompile(Tuple{typeof(CSV.detect), Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}, Int64, Int64, Base.Dict{Int8, Int8}, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Array{Int64, 1}, Bool, Array{Int8, 1}, Bool, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(Parsers.xparse), Type{Dates.DateTime}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}})
precompile(Tuple{typeof(CSV.uint64), Dates.DateTime})
precompile(Tuple{typeof(Base.setindex!), Array{UInt64, 1}, UInt64, Int64})
precompile(Tuple{typeof(CSV.parseint!), Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Dates.DateTime}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Bool}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsepooled!), Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}, Int64, Int64, Int64, Float64, Array{Base.Dict{String, UInt64}, 1}, Array{UInt64, 1}, Array{Int8, 1}, Bool, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(CSV.parsevalue!), Type{Float64}, Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}, Int64, Int64, Array{Int8, 1}, Array{Array{UInt64, 1}, 1}})
precompile(Tuple{typeof(Base.:(/)), Int64, Float64})
precompile(Tuple{typeof(Base.ceil), Type{Int64}, Float64})
precompile(Tuple{typeof(Mmap.mmap), Type{Array{UInt64, 1}}, Int64})
precompile(Tuple{typeof(CSV._eltype), Type{Dates.DateTime}})
precompile(Tuple{typeof(Base.nonmissingtype), Type{Dates.DateTime}})
precompile(Tuple{Type{CSV.Column{Dates.DateTime, Dates.DateTime}}, Array{UInt64, 1}, Int64, UInt8, Bool, Nothing, Array{UInt8, 1}, UInt64})
precompile(Tuple{getfield(CSV, Symbol("#23#31")), Tuple{Symbol, CSV.Column{Dates.DateTime, Dates.DateTime}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, CSV.Column{T, P} where P where T}, CSV.Column{Dates.DateTime, Dates.DateTime}, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, AbstractArray{T, 1} where T}, CSV.Column{Dates.DateTime, Dates.DateTime}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CSV.Column{Dates.DateTime, Dates.DateTime}, Int64})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), CSV.Column{Dates.DateTime, Dates.DateTime}})
precompile(Tuple{typeof(Base.length), CSV.Column{Int64, Int64}})
precompile(Tuple{typeof(DataFrames.ncol), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.names), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
precompile(Tuple{typeof(Base.lastindex), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.eltype), CSV.Column{Int64, Int64}})
precompile(Tuple{typeof(Base.eltype), CSV.Column{Dates.DateTime, Dates.DateTime}})
precompile(Tuple{typeof(Base.eltype), CSV.Column{Bool, Bool}})
precompile(Tuple{typeof(Base.eltype), CSV.Column{String, CSV.PooledString}})
precompile(Tuple{typeof(Base.eltype), CSV.Column{Float64, Float64}})
precompile(Tuple{typeof(Base.getindex), Array{DataType, 1}, Int64})
precompile(Tuple{typeof(Base.lastindex), Array{DataType, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Int64, Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Dates.DateTime, Dates.DateTime}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Dates.DateTime, Dates.DateTime}, Int64})
precompile(Tuple{typeof(Base.:(==)), Dates.DateTime, Dates.DateTime})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Bool, Bool}, Int64})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{String, CSV.PooledString}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{String, CSV.PooledString}, Int64})
precompile(Tuple{typeof(Base.lastindex), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.throw_boundserror), CSV.Column{Float64, Float64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.getindex), CSV.Column{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.lastindex), CSV.Column{Int64, Int64}})
precompile(Tuple{typeof(Base.lastindex), CSV.Column{Dates.DateTime, Dates.DateTime}})
precompile(Tuple{typeof(Base.lastindex), CSV.Column{Bool, Bool}})
precompile(Tuple{typeof(Base.lastindex), CSV.Column{String, CSV.PooledString}})
precompile(Tuple{typeof(Base.lastindex), CSV.Column{Float64, Float64}})
precompile(Tuple{typeof(Dataiku.iter_rows), Dataiku.DSSDataset})
precompile(Tuple{getfield(Base, Symbol("##Channel#637")), Type{T} where T, Nothing, Nothing, Nothing, Type{Base.Channel{T} where T}, Function})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:taskref, :spawn), Tuple{Nothing, Bool}}, Type{Base.Channel{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}}, Function, Int64})
precompile(Tuple{getfield(Base, Symbol("##_#633")), Nothing, Bool, Type{Base.Channel{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}}, getfield(Dataiku, Symbol("#31#32")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Dataiku.DSSDataset, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.register_taskdone_hook), Task, Function})
precompile(Tuple{getfield(Dataiku, Symbol("#31#32")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Dataiku.DSSDataset, Array{Any, 1}}, Base.Channel{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}})
precompile(Tuple{getfield(Base, Symbol("#634#635")){getfield(Dataiku, Symbol("#31#32")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Dataiku.DSSDataset, Array{Any, 1}}, Base.Channel{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}}})
precompile(Tuple{getfield(Mmap, Symbol("#3#5")){Int64, Ptr{Nothing}}, Array{UInt64, 1}})
precompile(Tuple{typeof(Base.take_buffered), Base.Channel{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}})
precompile(Tuple{typeof(Base.take_unbuffered), Base.Channel{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}})
precompile(Tuple{typeof(Base.take!), Base.Channel{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:taskref, :spawn), Tuple{Nothing, Bool}}, Type{Base.Channel{Any}}, Function, Int64})
precompile(Tuple{getfield(Base, Symbol("##_#633")), Nothing, Bool, Type{Base.Channel{Any}}, getfield(Dataiku, Symbol("#24#26")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Dataiku.DSSDataset, Array{Symbol, 1}, Nothing}, Int64})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(Dataiku, Symbol("#24#26")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Dataiku.DSSDataset, Array{Symbol, 1}, Nothing}, Base.Channel{Any}})
precompile(Tuple{getfield(Base, Symbol("#634#635")){getfield(Dataiku, Symbol("#24#26")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Dataiku.DSSDataset, Array{Symbol, 1}, Nothing}, Base.Channel{Any}}})
precompile(Tuple{Type{NamedTuple{(:iofunction,), T} where T<:Tuple}, Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(HTTP, Symbol("##stack#18")), Bool, Bool, Bool, Bool, Bool, Bool, Bool, Int64, Bool, Int64, Base.Iterators.Pairs{Symbol, getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}}, typeof(HTTP.stack)})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, Nothing, Nothing, Base.Iterators.Pairs{Symbol, getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}}, typeof(HTTP.request), String, String, Base.Dict{String, String}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}, typeof(HTTP.request), String, String, Base.Dict{String, String}, Nothing})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:reuse_limit,), Tuple{Int64}}}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:require_ssl_verification,), Tuple{Bool}}}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Bool, getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:copycols,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}, HTTP.Messages.Response}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:iofunction, :parent), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}, HTTP.Messages.Response}}}, Type{NamedTuple{(:parent,), Tuple{HTTP.Messages.Response}}}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Symbol, getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}, typeof(HTTP.request), Type{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}, Base.Iterators.Pairs{Symbol, getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}}, getfield(Base, Symbol("#50#52")){getfield(Base, Symbol("#50#51#53")){Base.ExponentialBackOff, getfield(HTTP.RetryRequest, Symbol("#2#3")){Bool, HTTP.Messages.Request}, typeof(HTTP.request)}}, Type{T} where T, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ExceptionRequest, Symbol("##request#1")), Base.Iterators.Pairs{Symbol, getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, Vararg{Any, N} where N})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#14")), Bool, Int64, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol}, NamedTuple{(:require_ssl_verification, :iofunction), Tuple{Bool, getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}}, typeof(HTTP.ConnectionPool.getconnection), Type{Sockets.TCPSocket}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("##getconnection#11")), Int64, Int64, Int64, Int64, Bool, Base.Iterators.Pairs{Symbol, getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{getfield(HTTP.ConnectionPool, Symbol("#kw##getconnection")), NamedTuple{(:reuse_limit, :iofunction), Tuple{Int64, getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}, typeof(HTTP.ConnectionPool.getconnection), Type{HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, Base.SubString{String}, Base.SubString{String}})
precompile(Tuple{typeof(Base.count), getfield(Dataiku, Symbol("#28#29")){Char}, String})
precompile(Tuple{typeof(Dataiku._split_last_line), String, Bool, Char})
precompile(Tuple{typeof(CSV.slurp), Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(CSV.file), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{Symbol, 1}, Bool, Int64, Nothing, Int64, Int64, Bool, Nothing, Bool, Bool, Array{String, 1}, String, Char, Bool, Char, Nothing, Nothing, Char, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, UInt8, Nothing, Nothing, Nothing, Nothing, Base.Dict{Int8, Int8}, Bool, Float64, Bool, Bool, Nothing, Bool, Bool, Nothing})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:delim, :types, :header, :dateformat), Tuple{Char, Nothing, Array{Symbol, 1}, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}}, Type{CSV.File{threaded} where threaded}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, DataFrames.DataFrame})
precompile(Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{getfield(Dataiku, Symbol("#25#27")){Base.Channel{Any}, Array{Symbol, 1}, Nothing}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Nothing})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.eachrow), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Base.put!), Base.Channel{DataFrames.DataFrameRow{D, S} where S<:DataFrames.AbstractIndex where D<:DataFrames.AbstractDataFrame}, DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(CSV.parsestring!), Int8, Array{UInt64, 1}, Array{UInt8, 1}, Int64, Int64, Parsers.Options{false, true, false, Base.Missing, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}}, Int64, Int64, Array{Int8, 1}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}, Int64})
precompile(Tuple{typeof(Base.lastindex), DataFrames.DataFrameRow{DataFrames.DataFrame, DataFrames.Index}})
precompile(Tuple{typeof(Dataiku.iter_tuples), Dataiku.DSSDataset})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:taskref, :spawn), Tuple{Nothing, Bool}}, Type{Base.Channel{Tuple}}, Function, Int64})
precompile(Tuple{getfield(Base, Symbol("##_#633")), Nothing, Bool, Type{Base.Channel{Tuple}}, getfield(Dataiku, Symbol("#37#39")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Dataiku.DSSDataset, Array{Any, 1}}, Int64})
precompile(Tuple{getfield(Dataiku, Symbol("#37#39")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Dataiku.DSSDataset, Array{Any, 1}}, Base.Channel{Tuple}})
precompile(Tuple{getfield(Base, Symbol("#634#635")){getfield(Dataiku, Symbol("#37#39")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Dataiku.DSSDataset, Array{Any, 1}}, Base.Channel{Tuple}}})
precompile(Tuple{typeof(Base.iterate), DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}, Tuple{Base.OneTo{Int64}, Int64}})
precompile(Tuple{typeof(Base.take_buffered), Base.Channel{Tuple}})
precompile(Tuple{typeof(Base.take_unbuffered), Base.Channel{Tuple}})
precompile(Tuple{typeof(Base.take!), Base.Channel{Tuple}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Dataiku, Symbol("#38#40")){DataFrames.DataFrame, Int64}, Base.UnitRange{Int64}})
precompile(Tuple{getfield(Dataiku, Symbol("#38#40")){DataFrames.DataFrame, Int64}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, getfield(Dataiku, Symbol("#38#40")){DataFrames.DataFrame, Int64}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, getfield(Dataiku, Symbol("#38#40")){DataFrames.DataFrame, Int64}}})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.UnitRange{Int64}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Dataiku, Symbol("#38#40")){DataFrames.DataFrame, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Base.UnitRange{Int64}, getfield(Dataiku, Symbol("#38#40")){DataFrames.DataFrame, Int64}}, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Int64, 1}, Dates.DateTime, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Base.UnitRange{Int64}, getfield(Dataiku, Symbol("#38#40")){DataFrames.DataFrame, Int64}}, Int64, Int64})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Tuple}, Tuple{Int64, Dates.DateTime, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Tuple}, Tuple{Int64, Dates.DateTime, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}})
precompile(Tuple{typeof(Base.put!), Base.Channel{Tuple}, Tuple{Int64, Dates.DateTime, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}})
precompile(Tuple{getfield(Dataiku, Symbol("##write_dataframe#44")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.write_dataframe), Function, Dataiku.DSSDataset})
precompile(Tuple{typeof(Dataiku.write_dataframe), Function, Dataiku.DSSDataset})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:taskref, :spawn), Tuple{Nothing, Bool}}, Type{Base.Channel{DataFrames.AbstractDataFrame}}, Function, Int64})
precompile(Tuple{getfield(Base, Symbol("##_#633")), Nothing, Bool, Type{Base.Channel{DataFrames.AbstractDataFrame}}, getfield(Main, Symbol("#7#8")), Int64})
precompile(Tuple{getfield(Main, Symbol("#7#8")), Base.Channel{DataFrames.AbstractDataFrame}})
precompile(Tuple{getfield(Base, Symbol("#634#635")){getfield(Main, Symbol("#7#8")), Base.Channel{DataFrames.AbstractDataFrame}}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:taskref, :spawn), Tuple{Nothing, Bool}}, Type{Base.Channel{DataFrames.DataFrame}}, Function, Int64})
precompile(Tuple{getfield(Base, Symbol("##_#633")), Nothing, Bool, Type{Base.Channel{DataFrames.DataFrame}}, getfield(Dataiku, Symbol("#34#35")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Dataiku.DSSDataset, Int64, Array{Any, 1}}, Int64})
precompile(Tuple{getfield(Dataiku, Symbol("#34#35")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Dataiku.DSSDataset, Int64, Array{Any, 1}}, Base.Channel{DataFrames.DataFrame}})
precompile(Tuple{getfield(Base, Symbol("#634#635")){getfield(Dataiku, Symbol("#34#35")){Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Dataiku.DSSDataset, Int64, Array{Any, 1}}, Base.Channel{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.take_buffered), Base.Channel{DataFrames.AbstractDataFrame}})
precompile(Tuple{typeof(Base.take_unbuffered), Base.Channel{DataFrames.AbstractDataFrame}})
precompile(Tuple{getfield(Dataiku, Symbol("##write_chnl#50")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.write_chnl), Dataiku.DSSDataset, Base.Channel{DataFrames.AbstractDataFrame}})
precompile(Tuple{typeof(Dataiku.write_chnl), Dataiku.DSSDataset, Base.Channel{DataFrames.AbstractDataFrame}})
precompile(Tuple{typeof(Base.take_buffered), Base.Channel{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.take_unbuffered), Base.Channel{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.iterate), Base.Channel{DataFrames.DataFrame}, Nothing})
precompile(Tuple{typeof(Base.iterate), Base.Channel{DataFrames.DataFrame}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{Symbol, 1}, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#66#68")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#65#67"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{DataFrames.DataFrame, 1}, Base.Generator{Base.Iterators.Filter{getfield(DataFrames, Symbol("#66#68")), Tuple{DataFrames.DataFrame, DataFrames.DataFrame}}, getfield(DataFrames, Symbol("#65#67"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Symbol, 1}, 1}, Array{Symbol, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, typeof(Base.names)}, Int64})
precompile(Tuple{typeof(Base._collect), Array{DataFrames.DataFrame, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, typeof(Base.names)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{Type{Base.Dict{Array{Symbol, 1}, Nothing}}})
precompile(Tuple{typeof(Base.hash), Array{Symbol, 1}, UInt64})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Array{Symbol, 1}, Nothing}, Int64})
precompile(Tuple{typeof(Base.isequal), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Array{Symbol, 1}, Nothing}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Array{Symbol, 1}, Nothing}, Nothing, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Array{Symbol, 1}, Nothing}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.unique), Array{Array{Symbol, 1}, 1}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Symbol, 1}, Tuple{Int64}})
precompile(Tuple{typeof(Base.setdiff!), Base.Set{Symbol}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Nothing}, Symbol})
precompile(Tuple{typeof(Base.filter), getfield(Base, Symbol("#83#84")){typeof(Base.in), typeof(Base.pop!), Base.Set{Symbol}}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#70#74")), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.filter!), getfield(DataFrames, Symbol("#70#74")), Array{Array{Symbol, 1}, 1}})
precompile(Tuple{typeof(Base.:(==)), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#77#78")){getfield(DataFrames, Symbol("#72#76")){Array{Symbol, 1}}}, Base.Iterators.Pairs{Int64, Array{Symbol, 1}, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Array{Symbol, 1}, 1}}}, typeof(Base.first)}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Int64, 1}, Base.Generator{Base.Iterators.Filter{getfield(Base, Symbol("#77#78")){getfield(DataFrames, Symbol("#72#76")){Array{Symbol, 1}}}, Base.Iterators.Pairs{Int64, Array{Symbol, 1}, Base.LinearIndices{1, Tuple{Base.OneTo{Int64}}}, Array{Array{Symbol, 1}, 1}}}, typeof(Base.first)}})
precompile(Tuple{getfield(DataFrames, Symbol("#71#75")){Array{Array{Symbol, 1}, 1}, Array{Symbol, 1}}, Tuple{Int64, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Base.Iterators.Enumerate{Array{Array{Symbol, 1}, 1}}, getfield(DataFrames, Symbol("#71#75")){Array{Array{Symbol, 1}, 1}, Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{Array{Array{Symbol, 1}, 1}}, getfield(DataFrames, Symbol("#71#75")){Array{Array{Symbol, 1}, 1}, Array{Symbol, 1}}}})
precompile(Tuple{getfield(DataFrames, Symbol("##_vcat#69")), Symbol, typeof(DataFrames._vcat), Array{DataFrames.DataFrame, 1}})
precompile(Tuple{typeof(Base.vcat), DataFrames.DataFrame, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.filter!), getfield(Base, Symbol("#83#84")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Symbol}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.mapfilter), getfield(Base, Symbol("#83#84")){typeof(Base.:(∉)), typeof(Base.push!), Base.Set{Symbol}}, typeof(Base.push!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.union!), Array{Symbol, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.union), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.intersect), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Symbol, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Symbol, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.map), Function, Array{DataFrames.DataFrame, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(DataFrames, Symbol("#73#77")){Symbol}, Array{DataFrames.DataFrame, 1}})
precompile(Tuple{typeof(Base._collect), Array{DataFrames.DataFrame, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{DataFrames.DataFrame, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{CSV.Column{Int64, Int64}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{CSV.Column{Int64, Int64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{CSV.Column{Int64, Int64}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CSV.Column{Int64, Int64}, 1}, CSV.Column{Int64, Int64}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{CSV.Column{Int64, Int64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{CSV.Column{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{CSV.Column{Int64, Int64}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{CSV.Column{Int64, Int64}, 1}, Base.Generator{Array{CSV.Column{Int64, Int64}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{CSV.Column{Int64, Int64}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{CSV.Column{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{CSV.Column{Int64, Int64}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{CSV.Column{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.sum), Array{Int64, 1}})
precompile(Tuple{typeof(Tables.allocatecolumn), Type{T} where T, Int64})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Int64}, Int64})
precompile(Tuple{typeof(Base.length), Array{CSV.Column{Int64, Int64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{CSV.Column{Int64, Int64}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, CSV.Column{Int64, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, CSV.Column{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Symbol, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{CSV.Column{Dates.DateTime, Dates.DateTime}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{CSV.Column{Dates.DateTime, Dates.DateTime}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{CSV.Column{Dates.DateTime, Dates.DateTime}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CSV.Column{Dates.DateTime, Dates.DateTime}, 1}, CSV.Column{Dates.DateTime, Dates.DateTime}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{CSV.Column{Dates.DateTime, Dates.DateTime}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{CSV.Column{Dates.DateTime, Dates.DateTime}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{CSV.Column{Dates.DateTime, Dates.DateTime}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{CSV.Column{Dates.DateTime, Dates.DateTime}, 1}, Base.Generator{Array{CSV.Column{Dates.DateTime, Dates.DateTime}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{CSV.Column{Dates.DateTime, Dates.DateTime}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{CSV.Column{Dates.DateTime, Dates.DateTime}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{CSV.Column{Dates.DateTime, Dates.DateTime}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{CSV.Column{Dates.DateTime, Dates.DateTime}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Dates.DateTime}, Int64})
precompile(Tuple{Type{Array{Dates.DateTime, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Dates.DateTime, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{CSV.Column{Dates.DateTime, Dates.DateTime}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{CSV.Column{Dates.DateTime, Dates.DateTime}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Dates.DateTime, 1}, Int64, CSV.Column{Dates.DateTime, Dates.DateTime}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Dates.DateTime, 1}, Int64, CSV.Column{Dates.DateTime, Dates.DateTime}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{CSV.Column{Bool, Bool}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{CSV.Column{Bool, Bool}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{CSV.Column{Bool, Bool}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CSV.Column{Bool, Bool}, 1}, CSV.Column{Bool, Bool}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{CSV.Column{Bool, Bool}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{CSV.Column{Bool, Bool}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{CSV.Column{Bool, Bool}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{CSV.Column{Bool, Bool}, 1}, Base.Generator{Array{CSV.Column{Bool, Bool}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{CSV.Column{Bool, Bool}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{CSV.Column{Bool, Bool}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{CSV.Column{Bool, Bool}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{CSV.Column{Bool, Bool}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Bool}, Int64})
precompile(Tuple{typeof(Base.length), Array{CSV.Column{Bool, Bool}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{CSV.Column{Bool, Bool}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Bool, 1}, Int64, CSV.Column{Bool, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Bool, 1}, Int64, CSV.Column{Bool, Bool}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{CSV.Column{String, CSV.PooledString}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{CSV.Column{String, CSV.PooledString}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{CSV.Column{String, CSV.PooledString}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CSV.Column{String, CSV.PooledString}, 1}, CSV.Column{String, CSV.PooledString}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{CSV.Column{String, CSV.PooledString}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{CSV.Column{String, CSV.PooledString}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{CSV.Column{String, CSV.PooledString}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{CSV.Column{String, CSV.PooledString}, 1}, Base.Generator{Array{CSV.Column{String, CSV.PooledString}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{CSV.Column{String, CSV.PooledString}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{CSV.Column{String, CSV.PooledString}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{CSV.Column{String, CSV.PooledString}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{CSV.Column{String, CSV.PooledString}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{String}, Int64})
precompile(Tuple{Type{Array{String, 1}}, UndefInitializer, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.length), Array{CSV.Column{String, CSV.PooledString}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{CSV.Column{String, CSV.PooledString}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Int64, CSV.Column{String, CSV.PooledString}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Int64, CSV.Column{String, CSV.PooledString}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{CSV.Column{Float64, Float64}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{CSV.Column{Float64, Float64}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{CSV.Column{Float64, Float64}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CSV.Column{Float64, Float64}, 1}, CSV.Column{Float64, Float64}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{CSV.Column{Float64, Float64}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{CSV.Column{Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{CSV.Column{Float64, Float64}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.collect_similar), Array{CSV.Column{Float64, Float64}, 1}, Base.Generator{Array{CSV.Column{Float64, Float64}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{CSV.Column{Float64, Float64}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{CSV.Column{Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{CSV.Column{Float64, Float64}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{CSV.Column{Float64, Float64}, 1}})
precompile(Tuple{typeof(DataAPI.defaultarray), Type{Float64}, Int64})
precompile(Tuple{typeof(Base.length), Array{CSV.Column{Float64, Float64}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{CSV.Column{Float64, Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, CSV.Column{Float64, Float64}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, CSV.Column{Float64, Float64}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:copycols,), Tuple{Bool}}, Type{DataFrames.DataFrame}, Array{AbstractArray{T, 1} where T, 1}, Array{Symbol, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), Array{Dates.DateTime, 1}})
precompile(Tuple{getfield(DataFrames, Symbol("#84#87")), Array{String, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Array{Int64, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Array{Int64, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Int64, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Int64, 1}, 1}, Array{Int64, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{Int64, 1}, 1}, Int64, Array{Array{Int64, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Int64, 1}, 1}, CSV.Column{Int64, Int64}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{AbstractArray{Int64, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{Int64, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{AbstractArray{Int64, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{AbstractArray{Int64, 1}, 1}})
precompile(Tuple{typeof(Base._collect), Array{AbstractArray{Int64, 1}, 1}, Base.Generator{Array{AbstractArray{Int64, 1}, 1}, typeof(Base.length)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{AbstractArray{Int64, 1}, 1}, Base.Generator{Array{AbstractArray{Int64, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._similar_for), Array{AbstractArray{Int64, 1}, 1}, Type{Int64}, Base.Generator{Array{AbstractArray{Int64, 1}, 1}, typeof(Base.length)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{AbstractArray{Int64, 1}, 1}, typeof(Base.length)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{AbstractArray{Int64, 1}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{AbstractArray{Int64, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{AbstractArray{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{AbstractArray{Int64, 1}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{AbstractArray{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{AbstractArray{Int64, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractArray{Int64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Int64, 1}, Int64, Array{Int64, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Array{Dates.DateTime, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Array{Dates.DateTime, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Dates.DateTime, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Dates.DateTime, 1}, 1}, Array{Dates.DateTime, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{Dates.DateTime, 1}, 1}, Int64, Array{Array{Dates.DateTime, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Dates.DateTime, 1}, 1}, CSV.Column{Dates.DateTime, Dates.DateTime}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{AbstractArray{Dates.DateTime, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{Dates.DateTime, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{AbstractArray{Dates.DateTime, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{AbstractArray{Dates.DateTime, 1}, 1}})
precompile(Tuple{typeof(Base._collect), Array{AbstractArray{Dates.DateTime, 1}, 1}, Base.Generator{Array{AbstractArray{Dates.DateTime, 1}, 1}, typeof(Base.length)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{AbstractArray{Dates.DateTime, 1}, 1}, Base.Generator{Array{AbstractArray{Dates.DateTime, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.length), Array{Dates.DateTime, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{AbstractArray{Dates.DateTime, 1}, 1}, Type{Int64}, Base.Generator{Array{AbstractArray{Dates.DateTime, 1}, 1}, typeof(Base.length)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{AbstractArray{Dates.DateTime, 1}, 1}, typeof(Base.length)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{AbstractArray{Dates.DateTime, 1}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.length), CSV.Column{Dates.DateTime, Dates.DateTime}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{AbstractArray{Dates.DateTime, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{AbstractArray{Dates.DateTime, 1}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{AbstractArray{Dates.DateTime, 1}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{AbstractArray{Dates.DateTime, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{AbstractArray{Dates.DateTime, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractArray{Dates.DateTime, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.allocatedinline), Type{Dates.DateTime}})
precompile(Tuple{typeof(Base.copyto!), Array{Dates.DateTime, 1}, Int64, Array{Dates.DateTime, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Dates.DateTime, 1}, Int64, Array{Dates.DateTime, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Array{Bool, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Array{Bool, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Bool, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Bool, 1}, 1}, Array{Bool, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{Bool, 1}, 1}, Int64, Array{Array{Bool, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Bool, 1}, 1}, CSV.Column{Bool, Bool}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{AbstractArray{Bool, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{Bool, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{AbstractArray{Bool, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{AbstractArray{Bool, 1}, 1}})
precompile(Tuple{typeof(Base._collect), Array{AbstractArray{Bool, 1}, 1}, Base.Generator{Array{AbstractArray{Bool, 1}, 1}, typeof(Base.length)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{AbstractArray{Bool, 1}, 1}, Base.Generator{Array{AbstractArray{Bool, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.length), Array{Bool, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{AbstractArray{Bool, 1}, 1}, Type{Int64}, Base.Generator{Array{AbstractArray{Bool, 1}, 1}, typeof(Base.length)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{AbstractArray{Bool, 1}, 1}, typeof(Base.length)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{AbstractArray{Bool, 1}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.length), CSV.Column{Bool, Bool}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{AbstractArray{Bool, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{AbstractArray{Bool, 1}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{AbstractArray{Bool, 1}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{AbstractArray{Bool, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{AbstractArray{Bool, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractArray{Bool, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Bool, 1}, Int64, Array{Bool, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Bool, 1}, Int64, Array{Bool, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Array{String, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Array{String, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{String, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{String, 1}, 1}, Array{String, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{String, 1}, 1}, Int64, Array{Array{String, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{String, 1}, 1}, CSV.Column{String, CSV.PooledString}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{AbstractArray{String, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{String, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{AbstractArray{String, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{AbstractArray{String, 1}, 1}})
precompile(Tuple{typeof(Base._collect), Array{AbstractArray{String, 1}, 1}, Base.Generator{Array{AbstractArray{String, 1}, 1}, typeof(Base.length)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{AbstractArray{String, 1}, 1}, Base.Generator{Array{AbstractArray{String, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base._similar_for), Array{AbstractArray{String, 1}, 1}, Type{Int64}, Base.Generator{Array{AbstractArray{String, 1}, 1}, typeof(Base.length)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{AbstractArray{String, 1}, 1}, typeof(Base.length)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{AbstractArray{String, 1}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.length), CSV.Column{String, CSV.PooledString}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{AbstractArray{String, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{AbstractArray{String, 1}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{AbstractArray{String, 1}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{AbstractArray{String, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{AbstractArray{String, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractArray{String, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Int64, Array{String, 1}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{String, 1}, 1}, CSV.Column{String, String}, Int64})
precompile(Tuple{typeof(Base.length), CSV.Column{String, String}})
precompile(Tuple{typeof(Base.eltype), CSV.Column{String, String}})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Int64, CSV.Column{String, String}, Int64, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{String, 1}, Int64, CSV.Column{String, String}})
precompile(Tuple{typeof(Base._similar_for), Array{DataFrames.DataFrame, 1}, Type{Array{Float64, 1}}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{Array{Float64, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Array{Float64, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{Float64, 1}, 1}, Array{Float64, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{AbstractArray{Float64, 1}, 1}, Int64, Array{Array{Float64, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Array{Float64, 1}, 1}, CSV.Column{Float64, Float64}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int64, Array{AbstractArray{Float64, 1}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{Float64, 1}, 1}, Base.Generator{Array{DataFrames.DataFrame, 1}, getfield(DataFrames, Symbol("#73#77")){Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.map), Function, Array{AbstractArray{Float64, 1}, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.length), Array{AbstractArray{Float64, 1}, 1}})
precompile(Tuple{typeof(Base._collect), Array{AbstractArray{Float64, 1}, 1}, Base.Generator{Array{AbstractArray{Float64, 1}, 1}, typeof(Base.length)}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_similar), Array{AbstractArray{Float64, 1}, 1}, Base.Generator{Array{AbstractArray{Float64, 1}, 1}, typeof(Base.length)}})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Base._similar_for), Array{AbstractArray{Float64, 1}, 1}, Type{Int64}, Base.Generator{Array{AbstractArray{Float64, 1}, 1}, typeof(Base.length)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{Int64, 1}, Base.Generator{Array{AbstractArray{Float64, 1}, 1}, typeof(Base.length)}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 1}, Int64, Base.Generator{Array{AbstractArray{Float64, 1}, 1}, typeof(Base.length)}, Int64})
precompile(Tuple{typeof(Base.length), CSV.Column{Float64, Float64}})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, NamedTuple{(), Tuple{}}, Array{AbstractArray{Float64, 1}, 1}, Base.Colon})
precompile(Tuple{typeof(Base.mapreduce), Function, Function, Array{AbstractArray{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.mapreduce_impl), typeof(Base.eltype), typeof(Base.promote_type), Array{AbstractArray{Float64, 1}, 1}, Int64, Int64, Int64})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.eltype), typeof(Base.promote_type), Base.IndexLinear, Array{AbstractArray{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{AbstractArray{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.getindex), Array{AbstractArray{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.copyto!), Array{Float64, 1}, Int64, Array{Float64, 1}})
precompile(Tuple{typeof(Base._all), getfield(Base, Symbol("#240#242")), Base.Dict{Symbol, Int64}, Base.Colon})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Int64}})
precompile(Tuple{typeof(Base.getindex), DataFrames.DataFrame, Base.UnitRange{Int64}, Base.Colon})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Dates.DateTime, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{Dates.DateTime, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Bool, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Array{String, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Float64, 1}, Tuple{Base.UnitRange{Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{DataFrames.DataFrame}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{DataFrames.DataFrame}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.put!), Base.Channel{DataFrames.DataFrame}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{DataFrames.AbstractDataFrame}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{DataFrames.AbstractDataFrame}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.put!), Base.Channel{DataFrames.AbstractDataFrame}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.lastindex), DataFrames.DataFrame, Int64})
precompile(Tuple{getfield(Base, Symbol("##_#633")), Nothing, Bool, Type{Base.Channel{Any}}, getfield(Dataiku, Symbol("#45#46")){Base.Channel{DataFrames.AbstractDataFrame}, DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Dataiku._dataframe_chnl_to_csv), Base.Channel{DataFrames.AbstractDataFrame}, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.put_buffered), Base.Channel{Any}, Base.BufferStream})
precompile(Tuple{typeof(Base.iterate), Base.Channel{DataFrames.AbstractDataFrame}, Nothing})
precompile(Tuple{typeof(Base.put_unbuffered), Base.Channel{Any}, Base.BufferStream})
precompile(Tuple{getfield(Dataiku, Symbol("#45#46")){Base.Channel{DataFrames.AbstractDataFrame}, DataFrames.DataFrame}, Base.Channel{Any}})
precompile(Tuple{getfield(Base, Symbol("#634#635")){getfield(Dataiku, Symbol("#45#46")){Base.Channel{DataFrames.AbstractDataFrame}, DataFrames.DataFrame}, Base.Channel{Any}}})
precompile(Tuple{Type{Tables.Schema{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Int64, Dates.DateTime, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}}}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Int64, Dates.DateTime, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}}, DataFrames.DataFrame})
precompile(Tuple{Type{NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), T} where T<:Tuple}, Tuple{Array{Int64, 1}, Array{Dates.DateTime, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Tables.rows), NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Array{Int64, 1}, Array{Dates.DateTime, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{typeof(Tables._types), Type{NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Array{Int64, 1}, Array{Dates.DateTime, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Tables.schema), Tables.RowIterator{NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Array{Int64, 1}, Array{Dates.DateTime, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{getfield(CSV, Symbol("##write#54")), Bool, Bool, Array{String, 1}, typeof(CSV.write), Tables.Schema{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Int64, Dates.DateTime, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}}, Tables.RowIterator{NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Array{Int64, 1}, Array{Dates.DateTime, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}}}}, Base.BufferStream, CSV.Options{UInt8, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#kw##write")), NamedTuple{(:writeheader,), Tuple{Bool}}, typeof(CSV.write), Tables.Schema{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Int64, Dates.DateTime, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}}, Tables.RowIterator{NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Array{Int64, 1}, Array{Dates.DateTime, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}}}}, Base.BufferStream, CSV.Options{UInt8, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Tuple{}}})
precompile(Tuple{typeof(CSV.writerow), Array{UInt8, 1}, Base.RefValue{Int64}, Int64, Base.BufferStream, Tables.Schema{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Int64, Dates.DateTime, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}}, Tables.ColumnsRow{NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Array{Int64, 1}, Array{Dates.DateTime, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}}}}, Int64, CSV.Options{UInt8, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Tuple{}}})
precompile(Tuple{getfield(CSV, Symbol("#55#56")){Bool, Tables.Schema{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Int64, Dates.DateTime, Dates.DateTime, Bool, String, Bool, String, Bool, String, Int64, Int64, Int64, Int64, Int64, String, String, Int64, Float64}}, Tables.RowIterator{NamedTuple{(:id, :Date, :Date_parsed, :holiday_bank, :holiday_bank_reasons, :holiday_school, :holiday_school_reasons, :holiday_weekend, :holiday_zones, :annee, :mois, :semaine, :jour, :jour_semaine, :Partenaire, :Agence, :CP, :nb_colis), Tuple{Array{Int64, 1}, Array{Dates.DateTime, 1}, Array{Dates.DateTime, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Bool, 1}, Array{String, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{String, 1}, Array{String, 1}, Array{Int64, 1}, Array{Float64, 1}}}}, CSV.Options{UInt8, UInt8, Dates.DateFormat{Symbol("yyyy-mm-ddTHH:MM:SS.sssZ"), Tuple{Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x6d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x73000000)}, Dates.Delim{Char, 1}}}, Tuple{}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Int64, Int64, Array{UInt8, 1}}, Base.BufferStream})
precompile(Tuple{getfield(Dataiku, Symbol("##write_data#51")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.write_data), Dataiku.DSSDataset, Base.Channel{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.write_data), Dataiku.DSSDataset, Base.Channel{Any}, Base.Dict{String, Any}})
precompile(Tuple{getfield(Dataiku, Symbol("##request#6")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request), String, String, Base.Channel{Any}})
precompile(Tuple{typeof(Dataiku._push_data), String, Base.Channel{Any}})
precompile(Tuple{getfield(HTTP, Symbol("##request#4")), Base.Dict{String, String}, Base.Channel{Any}, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), String, String, Base.Dict{String, String}, Base.Channel{Any}})
precompile(Tuple{typeof(HTTP.request), String, String, Base.Dict{String, String}, Base.Channel{Any}})
precompile(Tuple{getfield(HTTP.MessageRequest, Symbol("##request#1")), Base.VersionNumber, String, Nothing, Nothing, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Channel{Any}})
precompile(Tuple{getfield(HTTP.RedirectRequest, Symbol("##request#1")), Int64, Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Channel{Any}})
precompile(Tuple{typeof(HTTP.request), Type{HTTP.RedirectRequest.RedirectLayer{HTTP.MessageRequest.MessageLayer{HTTP.RetryRequest.RetryLayer{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}}}}, String, HTTP.URIs.URI, Array{Base.Pair{Base.SubString{String}, Base.SubString{String}}, 1}, Base.Channel{Any}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ExceptionRequest.ExceptionLayer{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.Channel{Any}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.Channel{Any}})
precompile(Tuple{getfield(HTTP.ConnectionRequest, Symbol("##request#1")), Nothing, Type{T} where T, Int64, Base.Iterators.Pairs{Symbol, Nothing, Tuple{Symbol}, NamedTuple{(:iofunction,), Tuple{Nothing}}}, typeof(HTTP.request), Type{HTTP.ConnectionRequest.ConnectionPoolLayer{HTTP.StreamRequest.StreamLayer{Union{}}}}, HTTP.URIs.URI, HTTP.Messages.Request, Base.Channel{Any}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("##request#1")), Nothing, Nothing, Int64, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.Channel{Any}})
precompile(Tuple{getfield(HTTP, Symbol("#kw##request")), NamedTuple{(:iofunction,), Tuple{Nothing}}, typeof(HTTP.request), Type{HTTP.StreamRequest.StreamLayer{Union{}}}, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.Channel{Any}})
precompile(Tuple{typeof(HTTP.StreamRequest.writebodystream), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Request, Base.Channel{Any}})
precompile(Tuple{typeof(HTTP.StreamRequest.writebody), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Request, Base.Channel{Any}})
precompile(Tuple{getfield(HTTP.StreamRequest, Symbol("#2#3")){HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}, HTTP.Messages.Request, Base.Channel{Any}, HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}}})
precompile(Tuple{typeof(HTTP.StreamRequest.writechunk), HTTP.Streams.Stream{HTTP.Messages.Response, HTTP.ConnectionPool.Transaction{Sockets.TCPSocket}}, HTTP.Messages.Request, Base.BufferStream})
precompile(Tuple{typeof(Dataiku._get_stream_write), DataFrames.DataFrame})
precompile(Tuple{typeof(Base.foreach), getfield(Base, Symbol("#466#467")){Task}, Array{Any, 1}})
precompile(Tuple{getfield(Base, Symbol("#649#651")){Task, Base.Channel{Any}}})
precompile(Tuple{typeof(Base.close_chnl_on_taskdone), Task, Base.Channel{Any}})
precompile(Tuple{getfield(Base, Symbol("#466#467")){Task}, getfield(Base, Symbol("#638#639")){Base.Channel{Any}}})
precompile(Tuple{typeof(Base.delete!), Base.IdDict{Any, Any}, Any})
precompile(Tuple{typeof(Base.close), Base.Channel{DataFrames.DataFrame}, Base.InvalidStateException})
precompile(Tuple{getfield(Base, Symbol("#649#651")){Task, Base.Channel{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.close_chnl_on_taskdone), Task, Base.Channel{DataFrames.DataFrame}})
precompile(Tuple{getfield(Base, Symbol("#466#467")){Task}, getfield(Base, Symbol("#638#639")){Base.Channel{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.close), Base.Channel{DataFrames.AbstractDataFrame}, Base.InvalidStateException})
precompile(Tuple{getfield(Base, Symbol("#649#651")){Task, Base.Channel{DataFrames.AbstractDataFrame}}})
precompile(Tuple{typeof(Base.close_chnl_on_taskdone), Task, Base.Channel{DataFrames.AbstractDataFrame}})
precompile(Tuple{getfield(Base, Symbol("#466#467")){Task}, getfield(Base, Symbol("#638#639")){Base.Channel{DataFrames.AbstractDataFrame}}})
precompile(Tuple{typeof(Dataiku.create_analysis), Dataiku.DSSDataset})
precompile(Tuple{typeof(Dataiku.request_json), String, String, Base.Dict{String, String}})
precompile(Tuple{Type{Dataiku.DSSAnalysis}, String, Dataiku.DSSProject})
precompile(Tuple{getfield(Dataiku, Symbol("##create_prediction_ml_task#78")), String, String, Nothing, Bool, typeof(Dataiku.create_prediction_ml_task), Dataiku.DSSDataset, Symbol})
precompile(Tuple{typeof(Dataiku.create_prediction_ml_task), Dataiku.DSSDataset, Symbol})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Symbol}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Symbol}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Symbol}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Symbol}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Symbol, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Symbol}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}, Int64})
precompile(Tuple{typeof(Dataiku.get_status), Dataiku.DSSMLTask})
precompile(Tuple{typeof(Dataiku.wait_guess_complete), Dataiku.DSSMLTask})
precompile(Tuple{getfield(Dataiku, Symbol("##create_ml_task#80")), Bool, typeof(Dataiku.create_ml_task), Dataiku.DSSDataset, Base.Dict{String, Any}})
precompile(Tuple{getfield(Dataiku, Symbol("#kw##create_ml_task")), NamedTuple{(:wait_guess,), Tuple{Bool}}, typeof(Dataiku.create_ml_task), Dataiku.DSSDataset, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Nothing})
precompile(Tuple{typeof(Base.convert), Type{Any}, Symbol})
precompile(Tuple{typeof(Base.write), JSON.Writer.StringContext{JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}}, Symbol})
precompile(Tuple{typeof(JSON.Writer.show_string), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Symbol})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Symbol})
precompile(Tuple{Type{Dataiku.DSSMLTask}, Base.Dict{String, Any}, Dataiku.DSSProject})
precompile(Tuple{Type{Dataiku.DSSMLTask}, String, String, Dataiku.DSSProject})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Symbol}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Symbol}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Symbol}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}})
precompile(Tuple{getfield(Dataiku, Symbol("##create_prediction_ml_task#81")), String, String, Nothing, Bool, typeof(Dataiku.create_prediction_ml_task), Dataiku.DSSAnalysis, Symbol})
precompile(Tuple{typeof(Dataiku.create_prediction_ml_task), Dataiku.DSSAnalysis, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Symbol}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Symbol}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Nothing}}, Int64})
precompile(Tuple{getfield(Dataiku, Symbol("##create_ml_task#83")), Bool, typeof(Dataiku.create_ml_task), Dataiku.DSSAnalysis, Base.Dict{String, Any}})
precompile(Tuple{getfield(Dataiku, Symbol("#kw##create_ml_task")), NamedTuple{(:wait_guess,), Tuple{Bool}}, typeof(Dataiku.create_ml_task), Dataiku.DSSAnalysis, Base.Dict{String, Any}})
precompile(Tuple{getfield(Dataiku, Symbol("##create_clustering_ml_task#79")), String, String, Bool, typeof(Dataiku.create_clustering_ml_task), Dataiku.DSSDataset})
precompile(Tuple{typeof(Dataiku.create_clustering_ml_task), Dataiku.DSSDataset})
precompile(Tuple{getfield(Dataiku, Symbol("##create_ml_task#80")), Bool, typeof(Dataiku.create_ml_task), Dataiku.DSSDataset, Base.Dict{String, String}})
precompile(Tuple{getfield(Dataiku, Symbol("#kw##create_ml_task")), NamedTuple{(:wait_guess,), Tuple{Bool}}, typeof(Dataiku.create_ml_task), Dataiku.DSSDataset, Base.Dict{String, String}})
precompile(Tuple{getfield(Dataiku, Symbol("##create_ml_task#83")), Bool, typeof(Dataiku.create_ml_task), Dataiku.DSSAnalysis, Base.Dict{String, String}})
precompile(Tuple{getfield(Dataiku, Symbol("##create_clustering_ml_task#82")), String, String, Bool, typeof(Dataiku.create_clustering_ml_task), Dataiku.DSSAnalysis})
precompile(Tuple{typeof(Dataiku.create_clustering_ml_task), Dataiku.DSSAnalysis})
precompile(Tuple{getfield(Dataiku, Symbol("##request#6")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request), String, String, Base.Dict{String, Nothing}})
precompile(Tuple{getfield(Dataiku, Symbol("##request_json#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request_json), String, String, Base.Dict{String, Nothing}})
precompile(Tuple{typeof(Dataiku.guess), Dataiku.DSSMLTask, Nothing})
precompile(Tuple{typeof(Dataiku.guess), Dataiku.DSSMLTask})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Nothing}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Nothing}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Nothing}})
precompile(Tuple{typeof(Dataiku.list_analysis), Dataiku.DSSProject})
precompile(Tuple{typeof(Dataiku.list_analysis)})
precompile(Tuple{typeof(Base.:(|>)), Array{Any, 1}, typeof(Base.length)})
precompile(Tuple{typeof(Dataiku.list_ml_tasks), Dataiku.DSSAnalysis})
precompile(Tuple{typeof(Dataiku.list_ml_tasks), Dataiku.DSSProject})
precompile(Tuple{typeof(Dataiku.list_ml_tasks)})
precompile(Tuple{getfield(Dataiku, Symbol("##request#6")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request), String, String, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(Dataiku, Symbol("##request_json#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request_json), String, String, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{getfield(Dataiku, Symbol("##start_train#85")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.start_train), Dataiku.DSSMLTask})
precompile(Tuple{getfield(Base, Symbol("#Timer#505#506")), Float64, Type{Base.Timer}, Int64})
precompile(Tuple{typeof(Dataiku.wait_train_complete), Dataiku.DSSMLTask})
precompile(Tuple{getfield(Dataiku, Symbol("##train#84")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.train), Dataiku.DSSMLTask})
precompile(Tuple{typeof(Dataiku.train), Dataiku.DSSMLTask})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Dataiku.get_trained_models_ids), Dataiku.DSSMLTask, String, Nothing})
precompile(Tuple{typeof(Dataiku.get_trained_models_ids), Dataiku.DSSMLTask, String})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Dataiku, Symbol("#87#92")){String}, Array{Any, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Dataiku, Symbol("#86#91")), Base.Iterators.Filter{getfield(Dataiku, Symbol("#87#92")){String}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Dataiku, Symbol("#87#92")){String}, Array{Any, 1}}})
precompile(Tuple{typeof(Base.grow_to!), Array{Any, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#87#92")){String}, Array{Any, 1}}, getfield(Dataiku, Symbol("#86#91"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#87#92")){String}, Array{Any, 1}}, getfield(Dataiku, Symbol("#86#91"))}})
precompile(Tuple{getfield(Dataiku, Symbol("#87#92")){String}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Dataiku, Symbol("#87#92")){String}, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{Base.Dict{String, Any}, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#87#92")){String}, Array{Any, 1}}, getfield(Dataiku, Symbol("#86#91"))}, Int64})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Dataiku, Symbol("#88#93")), Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Dataiku, Symbol("#88#93"))}})
precompile(Tuple{typeof(Base._array_for), Type{String}, Array{Base.Dict{String, Any}, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.collect_to!), Array{String, 1}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Dataiku, Symbol("#88#93"))}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Dataiku, Symbol("#88#93"))}, Int64})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}})
precompile(Tuple{typeof(Dataiku.start_ensembling), Dataiku.DSSMLTask, Array{String, 1}, String})
precompile(Tuple{typeof(Dataiku.get_trained_models_ids), Dataiku.DSSMLTask, Nothing, Nothing})
precompile(Tuple{Type{Dataiku.DSSTrainedModel}, Dataiku.DSSMLTask, Nothing, Nothing})
precompile(Tuple{typeof(Dataiku.ensemble), Dataiku.DSSMLTask, Array{String, 1}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, Array{String, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Array{String, 1}, Array{String, 1}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Array{String, 1}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}}, Int64})
precompile(Tuple{typeof(Dataiku.request_json), String, String, Base.Dict{String, Any}})
precompile(Tuple{Type{Dataiku.DSSTrainedModel}, String})
precompile(Tuple{typeof(Dataiku.get_snippet), Dataiku.DSSTrainedModel})
precompile(Tuple{typeof(Dataiku.get_user_meta), Dataiku.DSSTrainedModel})
precompile(Tuple{getfield(Dataiku, Symbol("##request#6")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request), String, String, Base.Dict{String, Array{String, 1}}})
precompile(Tuple{getfield(Dataiku, Symbol("##request_json#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request_json), String, String, Base.Dict{String, Array{String, 1}}})
precompile(Tuple{typeof(Dataiku.get_trained_model_snippet), Dataiku.DSSMLTask, Array{String, 1}})
precompile(Tuple{typeof(Dataiku.get_trained_model_snippet), Dataiku.DSSMLTask, String})
precompile(Tuple{typeof(Base.string), String, Base.SubString{String}, String, Base.SubString{String}, Vararg{Union{Char, Base.SubString{String}, String}, N} where N})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Array{String, 1}}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Array{String, 1}}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Array{String, 1}}})
precompile(Tuple{typeof(Dataiku.set_user_meta), Dataiku.DSSTrainedModel, Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.get_settings), Dataiku.DSSMLTask})
precompile(Tuple{typeof(Dataiku.set_settings), Dataiku.DSSMLTask, Base.Dict{String, Any}})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Float64})
precompile(Tuple{typeof(JSON.Writer.show_element), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Int64})
precompile(Tuple{typeof(Dataiku.get_trained_models_ids), Dataiku.DSSMLTask, String, String})
precompile(Tuple{Type{Dataiku.DSSTrainedModel}, Dataiku.DSSMLTask, String, String})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, getfield(Dataiku, Symbol("#90#95")){String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Dataiku, Symbol("#89#94")), Base.Iterators.Filter{getfield(Dataiku, Symbol("#90#95")){String}, Base.Dict{String, Any}}})
precompile(Tuple{getfield(Dataiku, Symbol("#90#95")){String}, Base.Pair{String, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Dataiku, Symbol("#90#95")){String}, Base.Dict{String, Any}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Dataiku, Symbol("#90#95")){String}, Base.Dict{String, Any}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#90#95")){String}, Base.Dict{String, Any}}, getfield(Dataiku, Symbol("#89#94"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#90#95")){String}, Base.Dict{String, Any}}, getfield(Dataiku, Symbol("#89#94"))}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#90#95")){String}, Base.Dict{String, Any}}, getfield(Dataiku, Symbol("#89#94"))}})
precompile(Tuple{typeof(Base.convert), Type{AbstractString}, String})
precompile(Tuple{getfield(Dataiku, Symbol("##request#6")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request), String, String, Base.Dict{Any, Any}})
precompile(Tuple{getfield(Dataiku, Symbol("##request_json#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request_json), String, String, Base.Dict{Any, Any}})
precompile(Tuple{getfield(Dataiku, Symbol("##deploy_to_flow#96")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.deploy_to_flow), Dataiku.DSSTrainedModel})
precompile(Tuple{typeof(Dataiku.deploy_to_flow), Dataiku.DSSTrainedModel})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Dataiku.find_field), Array{Any, 1}, String, Base.SubString{String}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{Any, Any}})
precompile(Tuple{Type{Dataiku.DSSSavedModel}, String, Dataiku.DSSProject})
precompile(Tuple{typeof(Dataiku.find_field), Array{Any, 1}, String, String})
precompile(Tuple{typeof(Dataiku.redeploy_to_flow), Dataiku.DSSTrainedModel, Dataiku.DSSSavedModel, Bool})
precompile(Tuple{typeof(Dataiku.redeploy_to_flow), Dataiku.DSSTrainedModel, Dataiku.DSSSavedModel})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, Bool}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Bool}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, Bool}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, Bool})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, Bool}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Bool, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Bool})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, Bool}}, Int64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, String, Bool})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Pair{String, Bool}})
precompile(Tuple{typeof(Base.in), Base.Pair{String, Any}, Base.Dict{String, Bool}, typeof(Base.:(==))})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Any}, Base.Dict{String, Bool}})
precompile(Tuple{typeof(Dataiku.list_versions), Dataiku.DSSSavedModel})
precompile(Tuple{Type{Dataiku.DSSModelVersion}, Dataiku.DSSSavedModel, Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.set_active), Dataiku.DSSModelVersion})
precompile(Tuple{typeof(Dataiku.get_snippet), Dataiku.DSSModelVersion})
precompile(Tuple{typeof(Dataiku.get_user_meta), Dataiku.DSSModelVersion})
precompile(Tuple{typeof(Dataiku.set_user_meta), Dataiku.DSSModelVersion, Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.delete), Dataiku.DSSSavedModel})
precompile(Tuple{typeof(Dataiku.delete), Dataiku.DSSMLTask})
precompile(Tuple{typeof(Dataiku.delete), Dataiku.DSSAnalysis})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{getfield(Dataiku, Symbol("##create_scenario#75")), Base.Dict{Any, Any}, String, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.create_scenario), String, String, Dataiku.DSSProject})
precompile(Tuple{typeof(Dataiku.create_scenario), String, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, String}, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, String}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Any}, String, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Any}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{typeof(Base.merge), Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.create_scenario), Base.Dict{String, Any}, Dataiku.DSSProject})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, String, Base.Dict{Any, Any}})
precompile(Tuple{Type{Dataiku.DSSScenario}, String, Dataiku.DSSProject})
precompile(Tuple{typeof(Dataiku.list_scenarios), Dataiku.DSSProject})
precompile(Tuple{typeof(Dataiku.list_scenarios)})
precompile(Tuple{typeof(Dataiku.get_status), Dataiku.DSSScenario})
precompile(Tuple{typeof(Dataiku.set_status), Dataiku.DSSScenario, Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.get_settings), Dataiku.DSSScenario})
precompile(Tuple{typeof(Base.in), Base.Pair{String, Any}, Base.Dict{Any, Any}, typeof(Base.:(==))})
precompile(Tuple{typeof(Base.:(==)), Base.Dict{String, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Dataiku.set_settings), Dataiku.DSSScenario, Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.set_payload), Dataiku.DSSScenario, String})
precompile(Tuple{typeof(Dataiku.get_payload), Dataiku.DSSScenario})
precompile(Tuple{typeof(Base.get), Base.Dict{String, Any}, String, String})
precompile(Tuple{typeof(Dataiku.run), Dataiku.DSSScenario, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Dataiku.is_cancelled), Dataiku.DSSTriggerFire})
precompile(Tuple{typeof(Dataiku.get_scenario_run), Dataiku.DSSTriggerFire})
precompile(Tuple{getfield(Dataiku, Symbol("##wait_for_scenario_run#77")), Bool, typeof(Dataiku.wait_for_scenario_run), Dataiku.DSSTriggerFire})
precompile(Tuple{typeof(Dataiku.get_details), Dataiku.DSSScenarioRun})
precompile(Tuple{typeof(Base.collect_to!), Array{Char, 1}, Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.CodeUnits{UInt8, String}, Type{Char}}})
precompile(Tuple{typeof(Base.filter), typeof(HTTP.Cookies.validcookievaluebyte), Array{Char, 1}})
precompile(Tuple{typeof(Base.string), Char, String, Char})
precompile(Tuple{typeof(HTTP.Cookies.sanitizeCookieValue), String})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Char, String})
precompile(Tuple{typeof(HTTP.Cookies.isCookieDomainName), String})
precompile(Tuple{typeof(Dates.dayofweek), Dates.DateTime})
precompile(Tuple{typeof(Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DatePart{Char(0x75000000)}, Dates.DateTime, Dates.DateLocale})
precompile(Tuple{typeof(Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Dates.DateTime, Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}})
precompile(Tuple{typeof(Dates.format), Dates.DateTime, Dates.DateFormat{Symbol("e, dd u yyyy HH:MM:SS"), Tuple{Dates.DatePart{Char(0x65000000)}, Dates.Delim{String, 2}, Dates.DatePart{Char(0x64000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x75000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x79000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x48000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x4d000000)}, Dates.Delim{Char, 1}, Dates.DatePart{Char(0x53000000)}}}, Int64})
precompile(Tuple{typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, String, String, String})
precompile(Tuple{typeof(HTTP.Cookies.isIP), String})
precompile(Tuple{Type{String}, HTTP.Cookies.Cookie, Bool})
precompile(Tuple{typeof(Base.string), String, Array{HTTP.Cookies.Cookie, 1}, Bool})
precompile(Tuple{getfield(Dataiku, Symbol("##wait#76")), Bool, typeof(Dataiku.wait), Dataiku.DSSScenarioRun})
precompile(Tuple{getfield(Dataiku, Symbol("##run_and_wait#72")), Bool, typeof(Dataiku.run_and_wait), Dataiku.DSSScenario, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Dataiku.run_and_wait), Dataiku.DSSScenario})
precompile(Tuple{Type{Dataiku.DSSTriggerFire}, Base.Dict{String, Any}})
precompile(Tuple{Type{NamedTuple{(:params,), T} where T<:Tuple}, Tuple{Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:intern_call,), Tuple{Bool}}}, Type{NamedTuple{(:params,), Tuple{Base.Dict{String, String}}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, String}}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, String}}, getfield(Dataiku, Symbol("#1#3"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, String}}, getfield(Dataiku, Symbol("#1#3"))}})
precompile(Tuple{getfield(Dataiku, Symbol("##get_url_and_header#5")), Bool, Base.Dict{String, String}, Bool, typeof(Dataiku.get_url_and_header), String})
precompile(Tuple{getfield(Dataiku, Symbol("##request#6")), Bool, Base.Iterators.Pairs{Symbol, Base.Dict{String, String}, Tuple{Symbol}, NamedTuple{(:params,), Tuple{Base.Dict{String, String}}}}, typeof(Dataiku.request), String, String, String})
precompile(Tuple{getfield(Dataiku, Symbol("##request_json#7")), Base.Iterators.Pairs{Symbol, Base.Dict{String, String}, Tuple{Symbol}, NamedTuple{(:params,), Tuple{Base.Dict{String, String}}}}, typeof(Dataiku.request_json), String, String, String})
precompile(Tuple{getfield(Dataiku, Symbol("#kw##request_json")), NamedTuple{(:params,), Tuple{Base.Dict{String, String}}}, typeof(Dataiku.request_json), String, String})
precompile(Tuple{Type{Dataiku.DSSScenarioRun}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Dataiku.run), Dataiku.DSSScenario})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Int64}, Base.Pair{String, Bool}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Bool}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Bool}}})
precompile(Tuple{typeof(Dataiku.get_last_runs), Dataiku.DSSScenario, Int64, Bool})
precompile(Tuple{typeof(Dataiku.get_current_run), Dataiku.DSSScenario})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Int64}, Int64, Bool})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Int64}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Bool}}, Int64})
precompile(Tuple{Type{Base.Dict{String, Integer}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Int64}, Type{String}, Type{Integer}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Integer}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Integer}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Integer}, Int64, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Integer}, Base.Dict{String, Int64}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Integer}, Bool, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Integer}, Tuple{Base.Pair{String, Int64}, Base.Pair{String, Bool}}, Int64})
precompile(Tuple{Type{NamedTuple{(:params,), T} where T<:Tuple}, Tuple{Base.Dict{String, Integer}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol}, Type{NamedTuple{(:intern_call,), Tuple{Bool}}}, Type{NamedTuple{(:params,), Tuple{Base.Dict{String, Integer}}}}})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, Integer}}, getfield(Dataiku, Symbol("#1#3"))}, Int64})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{getfield(Dataiku, Symbol("#2#4")), Base.Dict{String, Integer}}, getfield(Dataiku, Symbol("#1#3"))}})
precompile(Tuple{getfield(Dataiku, Symbol("##get_url_and_header#5")), Bool, Base.Dict{String, Integer}, Bool, typeof(Dataiku.get_url_and_header), String})
precompile(Tuple{getfield(Dataiku, Symbol("##request#6")), Bool, Base.Iterators.Pairs{Symbol, Base.Dict{String, Integer}, Tuple{Symbol}, NamedTuple{(:params,), Tuple{Base.Dict{String, Integer}}}}, typeof(Dataiku.request), String, String, String})
precompile(Tuple{getfield(Dataiku, Symbol("##request_json#7")), Base.Iterators.Pairs{Symbol, Base.Dict{String, Integer}, Tuple{Symbol}, NamedTuple{(:params,), Tuple{Base.Dict{String, Integer}}}}, typeof(Dataiku.request_json), String, String, String})
precompile(Tuple{getfield(Dataiku, Symbol("#kw##request_json")), NamedTuple{(:params,), Tuple{Base.Dict{String, Integer}}}, typeof(Dataiku.request_json), String, String})
precompile(Tuple{typeof(Dataiku.abort), Dataiku.DSSScenario})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, Base.Dict{Any, Any}}}}})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{Any, Any}, Tuple{Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, Base.Dict{Any, Any}}}})
precompile(Tuple{getfield(Dataiku, Symbol("##create_recipe#69")), Base.Dict{Any, Any}, typeof(Dataiku.create_recipe), Base.Dict{String, String}, Dataiku.DSSProject})
precompile(Tuple{getfield(Dataiku, Symbol("##create_recipe#68")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.create_recipe), String, String, Dataiku.DSSProject})
precompile(Tuple{typeof(Dataiku.create_recipe), String, String, Dataiku.DSSProject})
precompile(Tuple{Type{Base.Dict{String, Base.Dict{String, String}}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{Any, Any}, Type{String}, Type{Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.Dict{String, String}}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.Dict{String, String}}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Dict{String, String}}, Base.Dict{String, String}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Base.Dict{String, String}}, Tuple{Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{Type{Base.Dict{String, Base.Dict{K, V} where V where K}}})
precompile(Tuple{typeof(Base.empty), Base.Dict{String, Base.Dict{String, String}}, Type{String}, Type{Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{String, Base.Dict{K, V} where V where K}, Int64})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{String, Base.Dict{K, V} where V where K}, String})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{String, String}, String})
precompile(Tuple{typeof(Base.merge!), Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{String, Base.Dict{String, String}}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{String, Base.Dict{K, V} where V where K}, Base.Dict{Any, Any}, String})
precompile(Tuple{typeof(Base.grow_to!), Base.Dict{String, Base.Dict{K, V} where V where K}, Tuple{Base.Pair{String, Base.Dict{String, String}}, Base.Pair{String, Base.Dict{Any, Any}}}, Int64})
precompile(Tuple{getfield(Dataiku, Symbol("##request#6")), Bool, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request), String, String, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{getfield(Dataiku, Symbol("##request_json#7")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Dataiku.request_json), String, String, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(Dataiku.request_json), String, String, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int64, typeof(Base.sprint), Function, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(JSON.Writer.show_pair), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Pair{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(JSON.Writer.show_json), JSON.Writer.CompactContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, JSON.Serializations.StandardSerialization, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{typeof(JSON.Writer.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Base.Dict{K, V} where V where K}})
precompile(Tuple{Type{Dataiku.DSSRecipe}, String, Dataiku.DSSProject})
precompile(Tuple{typeof(Base.:(==)), Dataiku.DSSRecipe, Dataiku.DSSRecipe})
precompile(Tuple{typeof(Dataiku.get_definition_and_payload), Dataiku.DSSRecipe})
precompile(Tuple{typeof(Dataiku.get_metadata), Dataiku.DSSRecipe})
precompile(Tuple{typeof(Dataiku.set_metadata), Dataiku.DSSRecipe, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.getproperty), Dataiku.DSSRecipe, Symbol})
precompile(Tuple{typeof(Dataiku.get_name_or_id), Dataiku.DSSRecipe})
precompile(Tuple{typeof(Dataiku.full_name), Dataiku.DSSRecipe})
precompile(Tuple{typeof(Dataiku.get_status), Dataiku.DSSRecipe})
precompile(Tuple{typeof(Dataiku.delete), Dataiku.DSSRecipe})
precompile(Tuple{getfield(Dataiku, Symbol("##delete#63")), Bool, typeof(Dataiku.delete), Dataiku.DSSDataset})
precompile(Tuple{typeof(Dataiku.delete), Dataiku.DSSDataset})
precompile(Tuple{typeof(Base.uvfinalize), Sockets.TCPSocket})
